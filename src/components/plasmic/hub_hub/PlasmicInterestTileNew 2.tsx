// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: 1VDsOAINg5
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InterestImage from "../../InterestImage"; // plasmic-import: wOaOuD1bPJ/component
import CircleAddButton from "../../CircleAddButton"; // plasmic-import: ZfrYJ616sV/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicInterestTileNew.module.css"; // plasmic-import: 1VDsOAINg5/css

export type PlasmicInterestTileNew__VariantMembers = {
  selected: "selected";
};

export type PlasmicInterestTileNew__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};

type VariantPropType = keyof PlasmicInterestTileNew__VariantsArgs;
export const PlasmicInterestTileNew__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicInterestTileNew__ArgsType = {
  interestName?: React.ReactNode;
  interestImg?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInterestTileNew__ArgsType;
export const PlasmicInterestTileNew__ArgProps = new Array<ArgPropType>(
  "interestName",
  "interestImg"
);

export type PlasmicInterestTileNew__OverridesType = {
  root?: p.Flex<"div">;
  interestBox?: p.Flex<"div">;
  circleAddButton?: p.Flex<typeof CircleAddButton>;
};

export interface DefaultInterestTileNewProps {
  interestName?: React.ReactNode;
  interestImg?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

function PlasmicInterestTileNew__RenderFunc(props: {
  variants: PlasmicInterestTileNew__VariantsArgs;
  args: PlasmicInterestTileNew__ArgsType;
  overrides: PlasmicInterestTileNew__OverridesType;
  dataFetches?: PlasmicInterestTileNew__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected]: hasVariant(variants, "selected", "selected")
      })}
    >
      <div className={classNames(defaultcss.all, sty.freeBox___7KePq)}>
        <div
          className={classNames(defaultcss.all, sty.freeBox__f9Opo, {
            [sty.freeBox__selected__f9OpoyXfRn]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.freeBox__pzBr3, {
              [sty.freeBox__selected__pzBr3YXfRn]: hasVariant(
                variants,
                "selected",
                "selected"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <InterestImage
                  className={classNames(
                    "__wab_instance",
                    sty.interestImage__rP6A7
                  )}
                />
              ),

              value: args.interestImg
            })}
          </div>

          <div
            data-plasmic-name={"interestBox"}
            data-plasmic-override={overrides.interestBox}
            className={classNames(defaultcss.all, sty.interestBox, {
              [sty.interestBox__selected]: hasVariant(
                variants,
                "selected",
                "selected"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.freeBox__hHclE, {
                [sty.freeBox__selected__hHclEyXfRn]: hasVariant(
                  variants,
                  "selected",
                  "selected"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Personal Improvement",
                value: args.interestName,
                className: classNames(sty.slotInterestName)
              })}
            </div>

            <CircleAddButton
              data-plasmic-name={"circleAddButton"}
              data-plasmic-override={overrides.circleAddButton}
              className={classNames("__wab_instance", sty.circleAddButton, {
                [sty.circleAddButton__selected]: hasVariant(
                  variants,
                  "selected",
                  "selected"
                )
              })}
              state={
                hasVariant(variants, "selected", "selected")
                  ? ("selected" as const)
                  : ("unselected" as const)
              }
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "interestBox", "circleAddButton"],
  interestBox: ["interestBox", "circleAddButton"],
  circleAddButton: ["circleAddButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  interestBox: "div";
  circleAddButton: typeof CircleAddButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInterestTileNew__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInterestTileNew__VariantsArgs;
    args?: PlasmicInterestTileNew__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInterestTileNew__Fetches;
  } & Omit<PlasmicInterestTileNew__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInterestTileNew__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInterestTileNew__ArgProps,
      internalVariantPropNames: PlasmicInterestTileNew__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInterestTileNew__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInterestTileNew";
  } else {
    func.displayName = `PlasmicInterestTileNew.${nodeName}`;
  }
  return func;
}

export const PlasmicInterestTileNew = Object.assign(
  // Top-level PlasmicInterestTileNew renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    interestBox: makeNodeComponent("interestBox"),
    circleAddButton: makeNodeComponent("circleAddButton"),

    // Metadata about props expected for PlasmicInterestTileNew
    internalVariantProps: PlasmicInterestTileNew__VariantProps,
    internalArgProps: PlasmicInterestTileNew__ArgProps
  }
);

export default PlasmicInterestTileNew;
/* prettier-ignore-end */
