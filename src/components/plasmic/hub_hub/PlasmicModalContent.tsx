// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: _5AOERmbtp
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HubSelection from "../../HubSelection"; // plasmic-import: Xb5xo2JxQe/component
import Questlog from "../../Questlog"; // plasmic-import: xmtlGTX1K1/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicModalContent.module.css"; // plasmic-import: _5AOERmbtp/css

import iconsEditButton7JRrQv9LPc7U from "./images/iconsEditButton7.svg"; // plasmic-import: jRrQV9LPc7u/picture

export type PlasmicModalContent__VariantMembers = {};

export type PlasmicModalContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicModalContent__VariantsArgs;
export const PlasmicModalContent__VariantProps = new Array<VariantPropType>();

export type PlasmicModalContent__ArgsType = {};
type ArgPropType = keyof PlasmicModalContent__ArgsType;
export const PlasmicModalContent__ArgProps = new Array<ArgPropType>();

export type PlasmicModalContent__OverridesType = {
  root?: p.Flex<"div">;
  modeInfo?: p.Flex<"div">;
  modeSwitcher?: p.Flex<"div">;
  sectionView?: p.Flex<"div">;
  img?: p.Flex<"img">;
  hubSelection?: p.Flex<typeof HubSelection>;
  questlog?: p.Flex<typeof Questlog>;
};

export interface DefaultModalContentProps {
  className?: string;
}

function PlasmicModalContent__RenderFunc(props: {
  variants: PlasmicModalContent__VariantsArgs;
  args: PlasmicModalContent__ArgsType;
  overrides: PlasmicModalContent__OverridesType;
  dataFetches?: PlasmicModalContent__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"modeInfo"}
        data-plasmic-override={overrides.modeInfo}
        className={classNames(defaultcss.all, sty.modeInfo)}
      >
        <div
          data-plasmic-name={"modeSwitcher"}
          data-plasmic-override={overrides.modeSwitcher}
          className={classNames(defaultcss.all, sty.modeSwitcher)}
        />

        <div
          data-plasmic-name={"sectionView"}
          data-plasmic-override={overrides.sectionView}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.sectionView
          )}
        >
          {"Section View "}
        </div>

        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img)}
          role={"img"}
          src={iconsEditButton7JRrQv9LPc7U}
        />
      </div>

      <HubSelection
        data-plasmic-name={"hubSelection"}
        data-plasmic-override={overrides.hubSelection}
        className={classNames("__wab_instance", sty.hubSelection)}
      />

      <Questlog
        data-plasmic-name={"questlog"}
        data-plasmic-override={overrides.questlog}
        className={classNames("__wab_instance", sty.questlog)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modeInfo",
    "modeSwitcher",
    "sectionView",
    "img",
    "hubSelection",
    "questlog"
  ],
  modeInfo: ["modeInfo", "modeSwitcher", "sectionView", "img"],
  modeSwitcher: ["modeSwitcher"],
  sectionView: ["sectionView"],
  img: ["img"],
  hubSelection: ["hubSelection"],
  questlog: ["questlog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  modeInfo: "div";
  modeSwitcher: "div";
  sectionView: "div";
  img: "img";
  hubSelection: typeof HubSelection;
  questlog: typeof Questlog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModalContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModalContent__VariantsArgs;
    args?: PlasmicModalContent__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicModalContent__Fetches;
  } & Omit<PlasmicModalContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModalContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModalContent__ArgProps,
      internalVariantPropNames: PlasmicModalContent__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicModalContent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalContent";
  } else {
    func.displayName = `PlasmicModalContent.${nodeName}`;
  }
  return func;
}

export const PlasmicModalContent = Object.assign(
  // Top-level PlasmicModalContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modeInfo: makeNodeComponent("modeInfo"),
    modeSwitcher: makeNodeComponent("modeSwitcher"),
    sectionView: makeNodeComponent("sectionView"),
    img: makeNodeComponent("img"),
    hubSelection: makeNodeComponent("hubSelection"),
    questlog: makeNodeComponent("questlog"),

    // Metadata about props expected for PlasmicModalContent
    internalVariantProps: PlasmicModalContent__VariantProps,
    internalArgProps: PlasmicModalContent__ArgProps
  }
);

export default PlasmicModalContent;
/* prettier-ignore-end */
