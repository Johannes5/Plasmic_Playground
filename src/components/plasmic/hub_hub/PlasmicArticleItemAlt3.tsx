// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: NxONW6u8Sd
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicArticleItemAlt3.module.css"; // plasmic-import: NxONW6u8Sd/css

import DeviderIcon from "./icons/PlasmicIcon__Devider"; // plasmic-import: p54zAGje4d/icon

export type PlasmicArticleItemAlt3__VariantMembers = {
  grid: "hideImage" | "hideSnippet" | "titleOnly";
  list: "full" | "snippet" | "titleOnly";
};

export type PlasmicArticleItemAlt3__VariantsArgs = {
  grid?: MultiChoiceArg<"hideImage" | "hideSnippet" | "titleOnly">;
  list?: MultiChoiceArg<"full" | "snippet" | "titleOnly">;
};

type VariantPropType = keyof PlasmicArticleItemAlt3__VariantsArgs;
export const PlasmicArticleItemAlt3__VariantProps = new Array<VariantPropType>(
  "grid",
  "list"
);

export type PlasmicArticleItemAlt3__ArgsType = {
  snippet?: React.ReactNode;
  titleImage?: React.ReactNode;
  snippet2?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
};

type ArgPropType = keyof PlasmicArticleItemAlt3__ArgsType;
export const PlasmicArticleItemAlt3__ArgProps = new Array<ArgPropType>(
  "snippet",
  "titleImage",
  "snippet2",
  "source",
  "readingTime",
  "date"
);

export type PlasmicArticleItemAlt3__OverridesType = {
  root?: p.Flex<"div">;
  articleContent?: p.Flex<"div">;
  titleImage?: p.Flex<"div">;
  title?: p.Flex<"div">;
  metadata?: p.Flex<"div">;
  sourceContainer?: p.Flex<"div">;
  source?: p.Flex<"div">;
  timeData?: p.Flex<"div">;
  timeContainer?: p.Flex<"div">;
  dateContainer?: p.Flex<"div">;
  property1Full?: p.Flex<"div">;
  articleContent2?: p.Flex<"div">;
  textContainer?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  metadata2?: p.Flex<"div">;
  source2?: p.Flex<"div">;
  timeData2?: p.Flex<"div">;
  readingTime2?: p.Flex<"div">;
  date2?: p.Flex<"div">;
  snippet2?: p.Flex<"div">;
  titleImage2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultArticleItemAlt3Props {
  snippet?: React.ReactNode;
  titleImage?: React.ReactNode;
  snippet2?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
  grid?: MultiChoiceArg<"hideImage" | "hideSnippet" | "titleOnly">;
  list?: MultiChoiceArg<"full" | "snippet" | "titleOnly">;
  className?: string;
}

function PlasmicArticleItemAlt3__RenderFunc(props: {
  variants: PlasmicArticleItemAlt3__VariantsArgs;
  args: PlasmicArticleItemAlt3__ArgsType;
  overrides: PlasmicArticleItemAlt3__OverridesType;
  dataFetches?: PlasmicArticleItemAlt3__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__grid_hideImage]: hasVariant(variants, "grid", "hideImage"),
        [sty.root__grid_hideSnippet]: hasVariant(
          variants,
          "grid",
          "hideSnippet"
        ),
        [sty.root__list_full]: hasVariant(variants, "list", "full"),
        [sty.root__list_snippet]: hasVariant(variants, "list", "snippet"),
        [sty.root__list_titleOnly]: hasVariant(variants, "list", "titleOnly")
      })}
    >
      {(
        hasVariant(variants, "list", "titleOnly")
          ? false
          : hasVariant(variants, "list", "snippet")
          ? false
          : hasVariant(variants, "list", "full")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"articleContent"}
          data-plasmic-override={overrides.articleContent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.articleContent, {
            [sty.articleContent__global_theme_light]: hasVariant(
              globalVariants,
              "theme",
              "light"
            ),
            [sty.articleContent__grid_hideImage]: hasVariant(
              variants,
              "grid",
              "hideImage"
            ),
            [sty.articleContent__grid_hideSnippet]: hasVariant(
              variants,
              "grid",
              "hideSnippet"
            ),
            [sty.articleContent__grid_titleOnly]: hasVariant(
              variants,
              "grid",
              "titleOnly"
            ),
            [sty.articleContent__list_full]: hasVariant(
              variants,
              "list",
              "full"
            ),
            [sty.articleContent__list_snippet]: hasVariant(
              variants,
              "list",
              "snippet"
            ),
            [sty.articleContent__list_titleOnly]: hasVariant(
              variants,
              "list",
              "titleOnly"
            )
          })}
        >
          {(
            hasVariant(variants, "grid", "titleOnly")
              ? false
              : hasVariant(variants, "grid", "hideImage")
              ? false
              : true
          ) ? (
            <div
              data-plasmic-name={"titleImage"}
              data-plasmic-override={overrides.titleImage}
              className={classNames(defaultcss.all, sty.titleImage, {
                [sty.titleImage__global_theme_light]: hasVariant(
                  globalVariants,
                  "theme",
                  "light"
                ),
                [sty.titleImage__grid_hideImage]: hasVariant(
                  variants,
                  "grid",
                  "hideImage"
                ),
                [sty.titleImage__grid_hideSnippet]: hasVariant(
                  variants,
                  "grid",
                  "hideSnippet"
                ),
                [sty.titleImage__grid_titleOnly]: hasVariant(
                  variants,
                  "grid",
                  "titleOnly"
                ),
                [sty.titleImage__list_snippet]: hasVariant(
                  variants,
                  "list",
                  "snippet"
                ),
                [sty.titleImage__list_titleOnly]: hasVariant(
                  variants,
                  "list",
                  "titleOnly"
                )
              })}
            >
              {false
                ? p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.titleImage
                  })
                : null}
            </div>
          ) : null}

          <div
            className={classNames(defaultcss.all, sty.freeBox__gwxPs, {
              [sty.freeBox__grid_hideSnippet__gwxPspcPnz]: hasVariant(
                variants,
                "grid",
                "hideSnippet"
              ),
              [sty.freeBox__grid_titleOnly__gwxPs9HdF]: hasVariant(
                variants,
                "grid",
                "titleOnly"
              )
            })}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.title,
                {
                  [sty.title__global_theme_light]: hasVariant(
                    globalVariants,
                    "theme",
                    "light"
                  ),
                  [sty.title__grid_hideImage]: hasVariant(
                    variants,
                    "grid",
                    "hideImage"
                  ),
                  [sty.title__grid_hideSnippet]: hasVariant(
                    variants,
                    "grid",
                    "hideSnippet"
                  ),
                  [sty.title__grid_titleOnly]: hasVariant(
                    variants,
                    "grid",
                    "titleOnly"
                  )
                }
              )}
            >
              {"The MacBook Pro, iPad mini, and more are discounted at "}
            </div>
          </div>

          {(
            hasVariant(variants, "grid", "titleOnly")
              ? false
              : hasVariant(variants, "grid", "hideSnippet")
              ? false
              : true
          ) ? (
            <div
              className={classNames(defaultcss.all, sty.freeBox__oez5J, {
                [sty.freeBox__grid_hideImage__oez5JsT58N]: hasVariant(
                  variants,
                  "grid",
                  "hideImage"
                ),
                [sty.freeBox__grid_hideSnippet__oez5JpcPnz]: hasVariant(
                  variants,
                  "grid",
                  "hideSnippet"
                ),
                [sty.freeBox__grid_titleOnly__oez5J9HdF]: hasVariant(
                  variants,
                  "grid",
                  "titleOnly"
                )
              })}
            >
              {(hasVariant(variants, "grid", "hideSnippet") ? true : true) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox__yfHrU, {
                    [sty.freeBox__global_theme_light__yfHrUirtfl]: hasVariant(
                      globalVariants,
                      "theme",
                      "light"
                    ),
                    [sty.freeBox__grid_hideSnippet__yfHrUpcPnz]: hasVariant(
                      variants,
                      "grid",
                      "hideSnippet"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "Your goal in life is to find out the people who need you the most, to find out the business that needs you the most, to find the project and the art that needs you the most. There is something out there just for you...",
                    value: args.snippet,
                    className: classNames(sty.slotSnippet, {
                      [sty.slotSnippet__global_theme_light]: hasVariant(
                        globalVariants,
                        "theme",
                        "light"
                      ),
                      [sty.slotSnippet__grid_hideImage]: hasVariant(
                        variants,
                        "grid",
                        "hideImage"
                      ),
                      [sty.slotSnippet__grid_hideSnippet]: hasVariant(
                        variants,
                        "grid",
                        "hideSnippet"
                      )
                    })
                  })}
                </div>
              ) : null}
            </div>
          ) : null}

          <div
            data-plasmic-name={"metadata"}
            data-plasmic-override={overrides.metadata}
            className={classNames(defaultcss.all, sty.metadata, {
              [sty.metadata__grid_hideImage]: hasVariant(
                variants,
                "grid",
                "hideImage"
              ),
              [sty.metadata__grid_hideSnippet]: hasVariant(
                variants,
                "grid",
                "hideSnippet"
              ),
              [sty.metadata__grid_titleOnly]: hasVariant(
                variants,
                "grid",
                "titleOnly"
              )
            })}
          >
            <div
              data-plasmic-name={"sourceContainer"}
              data-plasmic-override={overrides.sourceContainer}
              className={classNames(defaultcss.all, sty.sourceContainer, {
                [sty.sourceContainer__grid_hideSnippet]: hasVariant(
                  variants,
                  "grid",
                  "hideSnippet"
                )
              })}
            >
              <div
                data-plasmic-name={"source"}
                data-plasmic-override={overrides.source}
                className={classNames(defaultcss.all, sty.source, {
                  [sty.source__grid_hideImage]: hasVariant(
                    variants,
                    "grid",
                    "hideImage"
                  ),
                  [sty.source__grid_hideSnippet]: hasVariant(
                    variants,
                    "grid",
                    "hideSnippet"
                  ),
                  [sty.source__grid_titleOnly]: hasVariant(
                    variants,
                    "grid",
                    "titleOnly"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "The Verge",
                  value: args.source,
                  className: classNames(sty.slotSource, {
                    [sty.slotSource__grid_hideImage]: hasVariant(
                      variants,
                      "grid",
                      "hideImage"
                    ),
                    [sty.slotSource__grid_hideSnippet]: hasVariant(
                      variants,
                      "grid",
                      "hideSnippet"
                    ),
                    [sty.slotSource__grid_titleOnly]: hasVariant(
                      variants,
                      "grid",
                      "titleOnly"
                    )
                  })
                })}
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"timeData"}
              data-plasmic-override={overrides.timeData}
              hasGap={true}
              className={classNames(defaultcss.all, sty.timeData, {
                [sty.timeData__grid_hideSnippet]: hasVariant(
                  variants,
                  "grid",
                  "hideSnippet"
                ),
                [sty.timeData__grid_titleOnly]: hasVariant(
                  variants,
                  "grid",
                  "titleOnly"
                )
              })}
            >
              <div
                data-plasmic-name={"timeContainer"}
                data-plasmic-override={overrides.timeContainer}
                className={classNames(defaultcss.all, sty.timeContainer, {
                  [sty.timeContainer__grid_hideSnippet]: hasVariant(
                    variants,
                    "grid",
                    "hideSnippet"
                  )
                })}
              >
                <div
                  className={classNames(defaultcss.all, sty.freeBox__fneZa, {
                    [sty.freeBox__grid_hideImage__fneZAsT58N]: hasVariant(
                      variants,
                      "grid",
                      "hideImage"
                    ),
                    [sty.freeBox__grid_hideSnippet__fneZApcPnz]: hasVariant(
                      variants,
                      "grid",
                      "hideSnippet"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "21 min read",
                    value: args.readingTime,
                    className: classNames(sty.slotReadingTime, {
                      [sty.slotReadingTime__grid_hideImage]: hasVariant(
                        variants,
                        "grid",
                        "hideImage"
                      ),
                      [sty.slotReadingTime__grid_hideSnippet]: hasVariant(
                        variants,
                        "grid",
                        "hideSnippet"
                      )
                    })
                  })}
                </div>
              </div>

              <div
                data-plasmic-name={"dateContainer"}
                data-plasmic-override={overrides.dateContainer}
                className={classNames(defaultcss.all, sty.dateContainer, {
                  [sty.dateContainer__grid_hideSnippet]: hasVariant(
                    variants,
                    "grid",
                    "hideSnippet"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "1 months ago",
                  value: args.date,
                  className: classNames(sty.slotDate, {
                    [sty.slotDate__grid_hideSnippet]: hasVariant(
                      variants,
                      "grid",
                      "hideSnippet"
                    ),
                    [sty.slotDate__grid_titleOnly]: hasVariant(
                      variants,
                      "grid",
                      "titleOnly"
                    )
                  })
                })}
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "list", "titleOnly")
          ? true
          : hasVariant(variants, "list", "snippet")
          ? true
          : hasVariant(variants, "list", "full")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property1Full"}
          data-plasmic-override={overrides.property1Full}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property1Full, {
            [sty.property1Full__list_full]: hasVariant(
              variants,
              "list",
              "full"
            ),
            [sty.property1Full__list_snippet]: hasVariant(
              variants,
              "list",
              "snippet"
            ),
            [sty.property1Full__list_titleOnly]: hasVariant(
              variants,
              "list",
              "titleOnly"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"articleContent2"}
            data-plasmic-override={overrides.articleContent2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.articleContent2, {
              [sty.articleContent2__list_snippet]: hasVariant(
                variants,
                "list",
                "snippet"
              ),
              [sty.articleContent2__list_titleOnly]: hasVariant(
                variants,
                "list",
                "titleOnly"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"textContainer"}
              data-plasmic-override={overrides.textContainer}
              hasGap={true}
              className={classNames(defaultcss.all, sty.textContainer, {
                [sty.textContainer__list_full]: hasVariant(
                  variants,
                  "list",
                  "full"
                ),
                [sty.textContainer__list_snippet]: hasVariant(
                  variants,
                  "list",
                  "snippet"
                ),
                [sty.textContainer__list_titleOnly]: hasVariant(
                  variants,
                  "list",
                  "titleOnly"
                )
              })}
            >
              <div
                data-plasmic-name={"title2"}
                data-plasmic-override={overrides.title2}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.title2,
                  {
                    [sty.title2__list_full]: hasVariant(
                      variants,
                      "list",
                      "full"
                    ),
                    [sty.title2__list_snippet]: hasVariant(
                      variants,
                      "list",
                      "snippet"
                    ),
                    [sty.title2__list_titleOnly]: hasVariant(
                      variants,
                      "list",
                      "titleOnly"
                    )
                  }
                )}
              >
                {"Two Things We Know With High Confidence"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"metadata2"}
                data-plasmic-override={overrides.metadata2}
                hasGap={true}
                className={classNames(defaultcss.all, sty.metadata2, {
                  [sty.metadata2__list_titleOnly]: hasVariant(
                    variants,
                    "list",
                    "titleOnly"
                  )
                })}
              >
                <div
                  data-plasmic-name={"source2"}
                  data-plasmic-override={overrides.source2}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.source2,
                    {
                      [sty.source2__list_full]: hasVariant(
                        variants,
                        "list",
                        "full"
                      ),
                      [sty.source2__list_snippet]: hasVariant(
                        variants,
                        "list",
                        "snippet"
                      ),
                      [sty.source2__list_titleOnly]: hasVariant(
                        variants,
                        "list",
                        "titleOnly"
                      )
                    }
                  )}
                >
                  {"collaborativefund.com"}
                </div>

                <div
                  data-plasmic-name={"timeData2"}
                  data-plasmic-override={overrides.timeData2}
                  className={classNames(defaultcss.all, sty.timeData2, {
                    [sty.timeData2__list_full]: hasVariant(
                      variants,
                      "list",
                      "full"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"readingTime2"}
                    data-plasmic-override={overrides.readingTime2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.readingTime2,
                      {
                        [sty.readingTime2__list_full]: hasVariant(
                          variants,
                          "list",
                          "full"
                        ),
                        [sty.readingTime2__list_snippet]: hasVariant(
                          variants,
                          "list",
                          "snippet"
                        )
                      }
                    )}
                  >
                    {"4 min read"}
                  </div>

                  <div
                    data-plasmic-name={"date2"}
                    data-plasmic-override={overrides.date2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.date2,
                      {
                        [sty.date2__list_full]: hasVariant(
                          variants,
                          "list",
                          "full"
                        ),
                        [sty.date2__list_snippet]: hasVariant(
                          variants,
                          "list",
                          "snippet"
                        )
                      }
                    )}
                  >
                    {"Mar 16"}
                  </div>
                </div>
              </p.Stack>

              {(hasVariant(variants, "list", "titleOnly") ? false : true) ? (
                <div
                  data-plasmic-name={"snippet2"}
                  data-plasmic-override={overrides.snippet2}
                  className={classNames(defaultcss.all, sty.snippet2, {
                    [sty.snippet2__list_full]: hasVariant(
                      variants,
                      "list",
                      "full"
                    ),
                    [sty.snippet2__list_snippet]: hasVariant(
                      variants,
                      "list",
                      "snippet"
                    ),
                    [sty.snippet2__list_titleOnly]: hasVariant(
                      variants,
                      "list",
                      "titleOnly"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "Unknowns exceed knowns even in the best of times.\n\nToday, that’s increased exponentially.\n\nNo one can expect their ability to predict the next year to be any better than their ability to predict the last year. The speed of change anchors the accuracy of predictions, so the year ahead becomes …\n\n",
                    value: args.snippet2,
                    className: classNames(sty.slotSnippet2, {
                      [sty.slotSnippet2__list_full]: hasVariant(
                        variants,
                        "list",
                        "full"
                      ),
                      [sty.slotSnippet2__list_snippet]: hasVariant(
                        variants,
                        "list",
                        "snippet"
                      ),
                      [sty.slotSnippet2__list_titleOnly]: hasVariant(
                        variants,
                        "list",
                        "titleOnly"
                      )
                    })
                  })}
                </div>
              ) : null}
            </p.Stack>

            {(
              hasVariant(variants, "list", "titleOnly")
                ? false
                : hasVariant(variants, "list", "snippet")
                ? false
                : true
            ) ? (
              <div
                data-plasmic-name={"titleImage2"}
                data-plasmic-override={overrides.titleImage2}
                className={classNames(defaultcss.all, sty.titleImage2, {
                  [sty.titleImage2__list_full]: hasVariant(
                    variants,
                    "list",
                    "full"
                  ),
                  [sty.titleImage2__list_snippet]: hasVariant(
                    variants,
                    "list",
                    "snippet"
                  ),
                  [sty.titleImage2__list_titleOnly]: hasVariant(
                    variants,
                    "list",
                    "titleOnly"
                  )
                })}
              />
            ) : null}
          </p.Stack>

          {(
            hasVariant(variants, "list", "titleOnly")
              ? true
              : hasVariant(variants, "list", "snippet")
              ? true
              : hasVariant(variants, "list", "full")
              ? true
              : false
          ) ? (
            <div
              className={classNames(defaultcss.all, sty.freeBox__cf3Y0, {
                [sty.freeBox__list_full__cf3Y0GqOzz]: hasVariant(
                  variants,
                  "list",
                  "full"
                ),
                [sty.freeBox__list_snippet__cf3Y0VgRo]: hasVariant(
                  variants,
                  "list",
                  "snippet"
                ),
                [sty.freeBox__list_titleOnly__cf3Y09ZCcY]: hasVariant(
                  variants,
                  "list",
                  "titleOnly"
                )
              })}
            >
              {(
                hasVariant(variants, "list", "titleOnly")
                  ? true
                  : hasVariant(variants, "list", "snippet")
                  ? true
                  : hasVariant(variants, "list", "full")
                  ? true
                  : false
              ) ? (
                <DeviderIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg, {
                    [sty.svg__list_full]: hasVariant(variants, "list", "full"),
                    [sty.svg__list_snippet]: hasVariant(
                      variants,
                      "list",
                      "snippet"
                    ),
                    [sty.svg__list_titleOnly]: hasVariant(
                      variants,
                      "list",
                      "titleOnly"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleContent",
    "titleImage",
    "title",
    "metadata",
    "sourceContainer",
    "source",
    "timeData",
    "timeContainer",
    "dateContainer",
    "property1Full",
    "articleContent2",
    "textContainer",
    "title2",
    "metadata2",
    "source2",
    "timeData2",
    "readingTime2",
    "date2",
    "snippet2",
    "titleImage2",
    "svg"
  ],
  articleContent: [
    "articleContent",
    "titleImage",
    "title",
    "metadata",
    "sourceContainer",
    "source",
    "timeData",
    "timeContainer",
    "dateContainer"
  ],
  titleImage: ["titleImage"],
  title: ["title"],
  metadata: [
    "metadata",
    "sourceContainer",
    "source",
    "timeData",
    "timeContainer",
    "dateContainer"
  ],
  sourceContainer: ["sourceContainer", "source"],
  source: ["source"],
  timeData: ["timeData", "timeContainer", "dateContainer"],
  timeContainer: ["timeContainer"],
  dateContainer: ["dateContainer"],
  property1Full: [
    "property1Full",
    "articleContent2",
    "textContainer",
    "title2",
    "metadata2",
    "source2",
    "timeData2",
    "readingTime2",
    "date2",
    "snippet2",
    "titleImage2",
    "svg"
  ],
  articleContent2: [
    "articleContent2",
    "textContainer",
    "title2",
    "metadata2",
    "source2",
    "timeData2",
    "readingTime2",
    "date2",
    "snippet2",
    "titleImage2"
  ],
  textContainer: [
    "textContainer",
    "title2",
    "metadata2",
    "source2",
    "timeData2",
    "readingTime2",
    "date2",
    "snippet2"
  ],
  title2: ["title2"],
  metadata2: ["metadata2", "source2", "timeData2", "readingTime2", "date2"],
  source2: ["source2"],
  timeData2: ["timeData2", "readingTime2", "date2"],
  readingTime2: ["readingTime2"],
  date2: ["date2"],
  snippet2: ["snippet2"],
  titleImage2: ["titleImage2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleContent: "div";
  titleImage: "div";
  title: "div";
  metadata: "div";
  sourceContainer: "div";
  source: "div";
  timeData: "div";
  timeContainer: "div";
  dateContainer: "div";
  property1Full: "div";
  articleContent2: "div";
  textContainer: "div";
  title2: "div";
  metadata2: "div";
  source2: "div";
  timeData2: "div";
  readingTime2: "div";
  date2: "div";
  snippet2: "div";
  titleImage2: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleItemAlt3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleItemAlt3__VariantsArgs;
    args?: PlasmicArticleItemAlt3__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArticleItemAlt3__Fetches;
  } & Omit<PlasmicArticleItemAlt3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArticleItemAlt3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleItemAlt3__ArgProps,
      internalVariantPropNames: PlasmicArticleItemAlt3__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArticleItemAlt3__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleItemAlt3";
  } else {
    func.displayName = `PlasmicArticleItemAlt3.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleItemAlt3 = Object.assign(
  // Top-level PlasmicArticleItemAlt3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleContent: makeNodeComponent("articleContent"),
    titleImage: makeNodeComponent("titleImage"),
    title: makeNodeComponent("title"),
    metadata: makeNodeComponent("metadata"),
    sourceContainer: makeNodeComponent("sourceContainer"),
    source: makeNodeComponent("source"),
    timeData: makeNodeComponent("timeData"),
    timeContainer: makeNodeComponent("timeContainer"),
    dateContainer: makeNodeComponent("dateContainer"),
    property1Full: makeNodeComponent("property1Full"),
    articleContent2: makeNodeComponent("articleContent2"),
    textContainer: makeNodeComponent("textContainer"),
    title2: makeNodeComponent("title2"),
    metadata2: makeNodeComponent("metadata2"),
    source2: makeNodeComponent("source2"),
    timeData2: makeNodeComponent("timeData2"),
    readingTime2: makeNodeComponent("readingTime2"),
    date2: makeNodeComponent("date2"),
    snippet2: makeNodeComponent("snippet2"),
    titleImage2: makeNodeComponent("titleImage2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicArticleItemAlt3
    internalVariantProps: PlasmicArticleItemAlt3__VariantProps,
    internalArgProps: PlasmicArticleItemAlt3__ArgProps
  }
);

export default PlasmicArticleItemAlt3;
/* prettier-ignore-end */
