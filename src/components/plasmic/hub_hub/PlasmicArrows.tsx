// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: W9XdlIeiuX
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicArrows.module.css"; // plasmic-import: W9XdlIeiuX/css

import ArrowIosLeftsvgIcon from "./icons/PlasmicIcon__ArrowIosLeftsvg"; // plasmic-import: mqQZiFLGtA/icon
import ArrowIosRightsvgIcon from "./icons/PlasmicIcon__ArrowIosRightsvg"; // plasmic-import: 5TngLItwC/icon

export type PlasmicArrows__VariantMembers = {
  leftHidden: "leftHidden";
  rightHidden: "rightHidden";
};

export type PlasmicArrows__VariantsArgs = {
  leftHidden?: SingleBooleanChoiceArg<"leftHidden">;
  rightHidden?: SingleBooleanChoiceArg<"rightHidden">;
};

type VariantPropType = keyof PlasmicArrows__VariantsArgs;
export const PlasmicArrows__VariantProps = new Array<VariantPropType>(
  "leftHidden",
  "rightHidden"
);

export type PlasmicArrows__ArgsType = {};
type ArgPropType = keyof PlasmicArrows__ArgsType;
export const PlasmicArrows__ArgProps = new Array<ArgPropType>();

export type PlasmicArrows__OverridesType = {
  root?: p.Flex<"div">;
  left?: p.Flex<"div">;
  right?: p.Flex<"div">;
};

export interface DefaultArrowsProps {
  leftHidden?: SingleBooleanChoiceArg<"leftHidden">;
  rightHidden?: SingleBooleanChoiceArg<"rightHidden">;
  className?: string;
}

function PlasmicArrows__RenderFunc(props: {
  variants: PlasmicArrows__VariantsArgs;
  args: PlasmicArrows__ArgsType;
  overrides: PlasmicArrows__OverridesType;
  dataFetches?: PlasmicArrows__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"left"}
        data-plasmic-override={overrides.left}
        className={classNames(defaultcss.all, sty.left)}
      >
        {(hasVariant(variants, "leftHidden", "leftHidden") ? true : true) ? (
          <ArrowIosLeftsvgIcon
            className={classNames(defaultcss.all, sty.svg__wuMoG, {
              [sty.svg__global_theme_dark__wuMoGoIz4X]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.svg__leftHidden__wuMoGyiznV]: hasVariant(
                variants,
                "leftHidden",
                "leftHidden"
              )
            })}
            role={"img"}
          />
        ) : null}
      </div>

      <div
        data-plasmic-name={"right"}
        data-plasmic-override={overrides.right}
        className={classNames(defaultcss.all, sty.right)}
      >
        <ArrowIosRightsvgIcon
          className={classNames(defaultcss.all, sty.svg__vsHnX, {
            [sty.svg__global_theme_dark__vsHnXoIz4X]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.svg__rightHidden__vsHnXzRhas]: hasVariant(
              variants,
              "rightHidden",
              "rightHidden"
            )
          })}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "left", "right"],
  left: ["left"],
  right: ["right"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  left: "div";
  right: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArrows__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArrows__VariantsArgs;
    args?: PlasmicArrows__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArrows__Fetches;
  } & Omit<PlasmicArrows__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArrows__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArrows__ArgProps,
      internalVariantPropNames: PlasmicArrows__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArrows__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArrows";
  } else {
    func.displayName = `PlasmicArrows.${nodeName}`;
  }
  return func;
}

export const PlasmicArrows = Object.assign(
  // Top-level PlasmicArrows renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    right: makeNodeComponent("right"),

    // Metadata about props expected for PlasmicArrows
    internalVariantProps: PlasmicArrows__VariantProps,
    internalArgProps: PlasmicArrows__ArgProps
  }
);

export default PlasmicArrows;
/* prettier-ignore-end */
