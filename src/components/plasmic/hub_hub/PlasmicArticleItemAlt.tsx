// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: NUbXF8Tt50
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicArticleItemAlt.module.css"; // plasmic-import: NUbXF8Tt50/css

export type PlasmicArticleItemAlt__VariantMembers = {};

export type PlasmicArticleItemAlt__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticleItemAlt__VariantsArgs;
export const PlasmicArticleItemAlt__VariantProps = new Array<VariantPropType>();

export type PlasmicArticleItemAlt__ArgsType = {};
type ArgPropType = keyof PlasmicArticleItemAlt__ArgsType;
export const PlasmicArticleItemAlt__ArgProps = new Array<ArgPropType>();

export type PlasmicArticleItemAlt__OverridesType = {
  root?: p.Flex<"div">;
  articleContent?: p.Flex<"div">;
  titleImage?: p.Flex<"div">;
  title?: p.Flex<"div">;
  snippet?: p.Flex<"div">;
  metadata?: p.Flex<"div">;
  source?: p.Flex<"div">;
  source2?: p.Flex<"div">;
  timeData?: p.Flex<"div">;
  readingTime?: p.Flex<"div">;
  readingTime2?: p.Flex<"div">;
  date?: p.Flex<"div">;
  date2?: p.Flex<"div">;
};

export interface DefaultArticleItemAltProps {
  className?: string;
}

function PlasmicArticleItemAlt__RenderFunc(props: {
  variants: PlasmicArticleItemAlt__VariantsArgs;
  args: PlasmicArticleItemAlt__ArgsType;
  overrides: PlasmicArticleItemAlt__OverridesType;
  dataFetches?: PlasmicArticleItemAlt__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"articleContent"}
        data-plasmic-override={overrides.articleContent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.articleContent)}
      >
        <div
          data-plasmic-name={"titleImage"}
          data-plasmic-override={overrides.titleImage}
          className={classNames(defaultcss.all, sty.titleImage)}
        />

        <div className={classNames(defaultcss.all, sty.freeBox__lGYfR)}>
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.title
            )}
          >
            {"The MacBook Pro, iPad mini, and more are discounted at "}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__mjiFx)}>
          <div
            data-plasmic-name={"snippet"}
            data-plasmic-override={overrides.snippet}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.snippet
            )}
          >
            {
              "Your goal in life is to find out the people who need you the most, to find out the business that needs you the most, to find the project and the art that needs you the most. There is something out there just for you..."
            }
          </div>
        </div>

        <div
          data-plasmic-name={"metadata"}
          data-plasmic-override={overrides.metadata}
          className={classNames(defaultcss.all, sty.metadata)}
        >
          <div
            data-plasmic-name={"source"}
            data-plasmic-override={overrides.source}
            className={classNames(defaultcss.all, sty.source)}
          >
            <div
              data-plasmic-name={"source2"}
              data-plasmic-override={overrides.source2}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.source2
              )}
            >
              {"The Verge"}
            </div>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"timeData"}
            data-plasmic-override={overrides.timeData}
            hasGap={true}
            className={classNames(defaultcss.all, sty.timeData)}
          >
            <div
              data-plasmic-name={"readingTime"}
              data-plasmic-override={overrides.readingTime}
              className={classNames(defaultcss.all, sty.readingTime)}
            >
              <div
                data-plasmic-name={"readingTime2"}
                data-plasmic-override={overrides.readingTime2}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.readingTime2
                )}
              >
                {"2 min read"}
              </div>
            </div>

            <div
              data-plasmic-name={"date"}
              data-plasmic-override={overrides.date}
              className={classNames(defaultcss.all, sty.date)}
            >
              <div
                data-plasmic-name={"date2"}
                data-plasmic-override={overrides.date2}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.date2
                )}
              >
                {"1 months ago"}
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleContent",
    "titleImage",
    "title",
    "snippet",
    "metadata",
    "source",
    "source2",
    "timeData",
    "readingTime",
    "readingTime2",
    "date",
    "date2"
  ],
  articleContent: [
    "articleContent",
    "titleImage",
    "title",
    "snippet",
    "metadata",
    "source",
    "source2",
    "timeData",
    "readingTime",
    "readingTime2",
    "date",
    "date2"
  ],
  titleImage: ["titleImage"],
  title: ["title"],
  snippet: ["snippet"],
  metadata: [
    "metadata",
    "source",
    "source2",
    "timeData",
    "readingTime",
    "readingTime2",
    "date",
    "date2"
  ],
  source: ["source", "source2"],
  source2: ["source2"],
  timeData: ["timeData", "readingTime", "readingTime2", "date", "date2"],
  readingTime: ["readingTime", "readingTime2"],
  readingTime2: ["readingTime2"],
  date: ["date", "date2"],
  date2: ["date2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleContent: "div";
  titleImage: "div";
  title: "div";
  snippet: "div";
  metadata: "div";
  source: "div";
  source2: "div";
  timeData: "div";
  readingTime: "div";
  readingTime2: "div";
  date: "div";
  date2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleItemAlt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleItemAlt__VariantsArgs;
    args?: PlasmicArticleItemAlt__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArticleItemAlt__Fetches;
  } & Omit<PlasmicArticleItemAlt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArticleItemAlt__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleItemAlt__ArgProps,
      internalVariantPropNames: PlasmicArticleItemAlt__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArticleItemAlt__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleItemAlt";
  } else {
    func.displayName = `PlasmicArticleItemAlt.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleItemAlt = Object.assign(
  // Top-level PlasmicArticleItemAlt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleContent: makeNodeComponent("articleContent"),
    titleImage: makeNodeComponent("titleImage"),
    title: makeNodeComponent("title"),
    snippet: makeNodeComponent("snippet"),
    metadata: makeNodeComponent("metadata"),
    source: makeNodeComponent("source"),
    source2: makeNodeComponent("source2"),
    timeData: makeNodeComponent("timeData"),
    readingTime: makeNodeComponent("readingTime"),
    readingTime2: makeNodeComponent("readingTime2"),
    date: makeNodeComponent("date"),
    date2: makeNodeComponent("date2"),

    // Metadata about props expected for PlasmicArticleItemAlt
    internalVariantProps: PlasmicArticleItemAlt__VariantProps,
    internalArgProps: PlasmicArticleItemAlt__ArgProps
  }
);

export default PlasmicArticleItemAlt;
/* prettier-ignore-end */
