// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: Xb5xo2JxQe
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HubItem from "../../HubItem"; // plasmic-import: wWoXZuP3yV/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicHubSelection.module.css"; // plasmic-import: Xb5xo2JxQe/css

import addCircle3WgcT62N5Ge from "./images/addCircle3.svg"; // plasmic-import: WgcT62n5ge/picture

export type PlasmicHubSelection__VariantMembers = {};

export type PlasmicHubSelection__VariantsArgs = {};
type VariantPropType = keyof PlasmicHubSelection__VariantsArgs;
export const PlasmicHubSelection__VariantProps = new Array<VariantPropType>();

export type PlasmicHubSelection__ArgsType = {
  currentHub?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHubSelection__ArgsType;
export const PlasmicHubSelection__ArgProps = new Array<ArgPropType>(
  "currentHub"
);

export type PlasmicHubSelection__OverridesType = {
  root?: p.Flex<"div">;
  figmaPaste?: p.Flex<"div">;
  group354?: p.Flex<"div">;
  hubTitle?: p.Flex<"div">;
  group355?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  rectangle31?: p.Flex<"div">;
  img?: p.Flex<"img">;
};

export interface DefaultHubSelectionProps {
  currentHub?: React.ReactNode;
  className?: string;
}

function PlasmicHubSelection__RenderFunc(props: {
  variants: PlasmicHubSelection__VariantsArgs;
  args: PlasmicHubSelection__ArgsType;
  overrides: PlasmicHubSelection__OverridesType;
  dataFetches?: PlasmicHubSelection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"figmaPaste"}
        data-plasmic-override={overrides.figmaPaste}
        className={classNames(defaultcss.all, sty.figmaPaste)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"group354"}
          data-plasmic-override={overrides.group354}
          hasGap={true}
          className={classNames(defaultcss.all, sty.group354)}
        >
          <HubItem
            className={classNames("__wab_instance", sty.hubItem__mfTxG)}
          />

          <HubItem
            className={classNames("__wab_instance", sty.hubItem__ikZwZ)}
            hubTitle={
              <div
                data-plasmic-name={"hubTitle"}
                data-plasmic-override={overrides.hubTitle}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.hubTitle
                )}
              >
                {"Girlfriends Hub"}
              </div>
            }
          />

          <HubItem
            className={classNames("__wab_instance", sty.hubItem___1UHk)}
            hubTitle={"Books"}
          />

          <HubItem
            className={classNames("__wab_instance", sty.hubItem__rdyTo)}
            hubTitle={"Podcasts"}
          />
        </p.Stack>

        <div
          data-plasmic-name={"group355"}
          data-plasmic-override={overrides.group355}
          className={classNames(defaultcss.all, sty.group355)}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Interest based Hub",
              value: args.currentHub,
              className: classNames(sty.slotCurrentHub)
            })}
          </div>

          {true ? (
            <div
              data-plasmic-name={"rectangle31"}
              data-plasmic-override={overrides.rectangle31}
              className={classNames(defaultcss.all, sty.rectangle31)}
            />
          ) : null}
        </div>
      </div>

      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img)}
        role={"img"}
        src={addCircle3WgcT62N5Ge}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "figmaPaste",
    "group354",
    "hubTitle",
    "group355",
    "freeBox",
    "rectangle31",
    "img"
  ],
  figmaPaste: [
    "figmaPaste",
    "group354",
    "hubTitle",
    "group355",
    "freeBox",
    "rectangle31"
  ],
  group354: ["group354", "hubTitle"],
  hubTitle: ["hubTitle"],
  group355: ["group355", "freeBox", "rectangle31"],
  freeBox: ["freeBox"],
  rectangle31: ["rectangle31"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  figmaPaste: "div";
  group354: "div";
  hubTitle: "div";
  group355: "div";
  freeBox: "div";
  rectangle31: "div";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHubSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHubSelection__VariantsArgs;
    args?: PlasmicHubSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHubSelection__Fetches;
  } & Omit<PlasmicHubSelection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHubSelection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHubSelection__ArgProps,
      internalVariantPropNames: PlasmicHubSelection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHubSelection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHubSelection";
  } else {
    func.displayName = `PlasmicHubSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicHubSelection = Object.assign(
  // Top-level PlasmicHubSelection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    figmaPaste: makeNodeComponent("figmaPaste"),
    group354: makeNodeComponent("group354"),
    hubTitle: makeNodeComponent("hubTitle"),
    group355: makeNodeComponent("group355"),
    freeBox: makeNodeComponent("freeBox"),
    rectangle31: makeNodeComponent("rectangle31"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHubSelection
    internalVariantProps: PlasmicHubSelection__VariantProps,
    internalArgProps: PlasmicHubSelection__ArgProps
  }
);

export default PlasmicHubSelection;
/* prettier-ignore-end */
