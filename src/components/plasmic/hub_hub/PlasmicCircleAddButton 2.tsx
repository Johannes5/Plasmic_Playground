// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: ZfrYJ616sV
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicCircleAddButton.module.css"; // plasmic-import: ZfrYJ616sV/css

import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: -gNKA8h-Z4/icon
import Add24FilledIcon from "./icons/PlasmicIcon__Add24Filled"; // plasmic-import: W5RSWrKI-W/icon

export type PlasmicCircleAddButton__VariantMembers = {
  state: "selected" | "unselected" | "small";
};

export type PlasmicCircleAddButton__VariantsArgs = {
  state?: SingleChoiceArg<"selected" | "unselected" | "small">;
};

type VariantPropType = keyof PlasmicCircleAddButton__VariantsArgs;
export const PlasmicCircleAddButton__VariantProps = new Array<VariantPropType>(
  "state"
);

export type PlasmicCircleAddButton__ArgsType = {};
type ArgPropType = keyof PlasmicCircleAddButton__ArgsType;
export const PlasmicCircleAddButton__ArgProps = new Array<ArgPropType>();

export type PlasmicCircleAddButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultCircleAddButtonProps {
  state?: SingleChoiceArg<"selected" | "unselected" | "small">;
  className?: string;
}

function PlasmicCircleAddButton__RenderFunc(props: {
  variants: PlasmicCircleAddButton__VariantsArgs;
  args: PlasmicCircleAddButton__ArgsType;
  overrides: PlasmicCircleAddButton__OverridesType;
  dataFetches?: PlasmicCircleAddButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_selected]: hasVariant(variants, "state", "selected"),
        [sty.root__state_small]: hasVariant(variants, "state", "small"),
        [sty.root__state_unselected]: hasVariant(
          variants,
          "state",
          "unselected"
        )
      })}
    >
      {(
        hasVariant(variants, "state", "small")
          ? false
          : hasVariant(variants, "state", "unselected")
          ? false
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__lbL9Q, {
            [sty.freeBox__state_selected__lbL9QbalMi]: hasVariant(
              variants,
              "state",
              "selected"
            ),
            [sty.freeBox__state_small__lbL9QWuZx]: hasVariant(
              variants,
              "state",
              "small"
            ),
            [sty.freeBox__state_unselected__lbL9QVgwL]: hasVariant(
              variants,
              "state",
              "unselected"
            )
          })}
        >
          {true ? (
            <VectorIcon
              className={classNames(defaultcss.all, sty.svg__r1Dnl, {
                [sty.svg__state_small__r1DnlWuZx]: hasVariant(
                  variants,
                  "state",
                  "small"
                ),
                [sty.svg__state_unselected__r1DnlVgwL]: hasVariant(
                  variants,
                  "state",
                  "unselected"
                )
              })}
              role={"img"}
            />
          ) : null}
          {false ? (
            <Add24FilledIcon
              className={classNames(defaultcss.all, sty.svg__aoy8Z, {
                [sty.svg__state_small__aoy8ZWuZx]: hasVariant(
                  variants,
                  "state",
                  "small"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "state", "small")
          ? true
          : hasVariant(variants, "state", "unselected")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox___5VcrX, {
            [sty.freeBox__state_selected___5VcrXbalMi]: hasVariant(
              variants,
              "state",
              "selected"
            ),
            [sty.freeBox__state_small___5VcrXWuZx]: hasVariant(
              variants,
              "state",
              "small"
            ),
            [sty.freeBox__state_unselected___5VcrXVgwL]: hasVariant(
              variants,
              "state",
              "unselected"
            )
          })}
        >
          {(hasVariant(variants, "state", "unselected") ? false : true) ? (
            <VectorIcon
              className={classNames(defaultcss.all, sty.svg___1SQUn, {
                [sty.svg__state_small___1SQUnWuZx]: hasVariant(
                  variants,
                  "state",
                  "small"
                ),
                [sty.svg__state_unselected___1SQUnVgwL]: hasVariant(
                  variants,
                  "state",
                  "unselected"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(hasVariant(variants, "state", "unselected") ? true : false) ? (
            <Add24FilledIcon
              className={classNames(defaultcss.all, sty.svg__jqHif, {
                [sty.svg__state_unselected__jqHifVgwL]: hasVariant(
                  variants,
                  "state",
                  "unselected"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant(variants, "state", "small")
              ? false
              : hasVariant(variants, "state", "unselected")
              ? true
              : false
          ) ? (
            <div
              className={classNames(defaultcss.all, sty.freeBox__h3WYg, {
                [sty.freeBox__state_selected__h3WYGbalMi]: hasVariant(
                  variants,
                  "state",
                  "selected"
                ),
                [sty.freeBox__state_small__h3WYgWuZx]: hasVariant(
                  variants,
                  "state",
                  "small"
                ),
                [sty.freeBox__state_unselected__h3WYgVgwL]: hasVariant(
                  variants,
                  "state",
                  "unselected"
                )
              })}
            >
              {(hasVariant(variants, "state", "unselected") ? false : true) ? (
                <VectorIcon
                  className={classNames(defaultcss.all, sty.svg___7NJDf, {
                    [sty.svg__state_small___7NJDfWuZx]: hasVariant(
                      variants,
                      "state",
                      "small"
                    ),
                    [sty.svg__state_unselected___7NJDfVgwL]: hasVariant(
                      variants,
                      "state",
                      "unselected"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
              {(hasVariant(variants, "state", "unselected") ? true : false) ? (
                <Add24FilledIcon
                  className={classNames(defaultcss.all, sty.svg__jGtUc, {
                    [sty.svg__state_unselected__jGtUcVgwL]: hasVariant(
                      variants,
                      "state",
                      "unselected"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCircleAddButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCircleAddButton__VariantsArgs;
    args?: PlasmicCircleAddButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCircleAddButton__Fetches;
  } & Omit<PlasmicCircleAddButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCircleAddButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCircleAddButton__ArgProps,
      internalVariantPropNames: PlasmicCircleAddButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCircleAddButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCircleAddButton";
  } else {
    func.displayName = `PlasmicCircleAddButton.${nodeName}`;
  }
  return func;
}

export const PlasmicCircleAddButton = Object.assign(
  // Top-level PlasmicCircleAddButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCircleAddButton
    internalVariantProps: PlasmicCircleAddButton__VariantProps,
    internalArgProps: PlasmicCircleAddButton__ArgProps
  }
);

export default PlasmicCircleAddButton;
/* prettier-ignore-end */
