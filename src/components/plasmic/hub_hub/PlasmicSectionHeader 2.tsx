// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: Isc1ACYDLI
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSectionHeader.module.css"; // plasmic-import: Isc1ACYDLI/css

import IconsSourcesYoutubeIcon from "./icons/PlasmicIcon__IconsSourcesYoutube"; // plasmic-import: 9FfsM2N0XvJ/icon
import MenuIconIcon from "./icons/PlasmicIcon__MenuIcon"; // plasmic-import: 6ypUPjJsyj/icon

export type PlasmicSectionHeader__VariantMembers = {
  state: "defualt" | "editMode" | "sectionSettings";
};

export type PlasmicSectionHeader__VariantsArgs = {
  state?: SingleChoiceArg<"defualt" | "editMode" | "sectionSettings">;
};

type VariantPropType = keyof PlasmicSectionHeader__VariantsArgs;
export const PlasmicSectionHeader__VariantProps = new Array<VariantPropType>(
  "state"
);

export type PlasmicSectionHeader__ArgsType = {
  sectionTitle?: React.ReactNode;
  sourceIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionHeader__ArgsType;
export const PlasmicSectionHeader__ArgProps = new Array<ArgPropType>(
  "sectionTitle",
  "sourceIcon"
);

export type PlasmicSectionHeader__OverridesType = {
  root?: p.Flex<"div">;
  frame178?: p.Flex<"div">;
  save?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  rightHandAction?: p.Flex<"div">;
};

export interface DefaultSectionHeaderProps {
  sectionTitle?: React.ReactNode;
  sourceIcon?: React.ReactNode;
  state?: SingleChoiceArg<"defualt" | "editMode" | "sectionSettings">;
  className?: string;
}

function PlasmicSectionHeader__RenderFunc(props: {
  variants: PlasmicSectionHeader__VariantsArgs;
  args: PlasmicSectionHeader__ArgsType;
  overrides: PlasmicSectionHeader__OverridesType;
  dataFetches?: PlasmicSectionHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        ),
        [sty.root__state_defualt]: hasVariant(variants, "state", "defualt"),
        [sty.root__state_editMode]: hasVariant(variants, "state", "editMode"),
        [sty.root__state_sectionSettings]: hasVariant(
          variants,
          "state",
          "sectionSettings"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame178"}
        data-plasmic-override={overrides.frame178}
        hasGap={true}
        className={classNames(defaultcss.all, sty.frame178, {
          [sty.frame178__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.frame178__state_defualt]: hasVariant(
            variants,
            "state",
            "defualt"
          ),
          [sty.frame178__state_editMode]: hasVariant(
            variants,
            "state",
            "editMode"
          ),
          [sty.frame178__state_sectionSettings]: hasVariant(
            variants,
            "state",
            "sectionSettings"
          )
        })}
      >
        {(
          hasVariant(variants, "state", "sectionSettings")
            ? false
            : hasVariant(variants, "state", "editMode")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: true ? (
                <IconsSourcesYoutubeIcon
                  className={classNames(defaultcss.all, sty.svg__ugRxK)}
                  role={"img"}
                />
              ) : null,
              value: args.sourceIcon
            })
          : null}
        {(hasVariant(variants, "state", "sectionSettings") ? true : false) ? (
          <div
            data-plasmic-name={"save"}
            data-plasmic-override={overrides.save}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.save,
              {
                [sty.save__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.save__state_sectionSettings]: hasVariant(
                  variants,
                  "state",
                  "sectionSettings"
                )
              }
            )}
          >
            {hasVariant(variants, "state", "sectionSettings") ? "Save" : "SAVE"}
          </div>
        ) : null}
        {(
          hasVariant(variants, "state", "editMode")
            ? true
            : hasVariant(variants, "state", "defualt")
            ? false
            : false
        ) ? (
          <MenuIconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg, {
              [sty.svg__state_defualt]: hasVariant(
                variants,
                "state",
                "defualt"
              ),
              [sty.svg__state_editMode]: hasVariant(
                variants,
                "state",
                "editMode"
              )
            })}
            role={"img"}
          />
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: "Youtube - Programming ⌨️",
          value: args.sectionTitle,
          className: classNames(sty.slotSectionTitle, {
            [sty.slotSectionTitle__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.slotSectionTitle__state_defualt]: hasVariant(
              variants,
              "state",
              "defualt"
            ),
            [sty.slotSectionTitle__state_editMode]: hasVariant(
              variants,
              "state",
              "editMode"
            ),
            [sty.slotSectionTitle__state_sectionSettings]: hasVariant(
              variants,
              "state",
              "sectionSettings"
            )
          })
        })}
      </p.Stack>

      {(hasVariant(globalVariants, "theme", "dark") ? true : false) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox,
            {
              [sty.freeBox__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          {"See All"}
        </div>
      ) : null}
      {(hasVariant(globalVariants, "theme", "dark") ? false : true) ? (
        <div
          data-plasmic-name={"rightHandAction"}
          data-plasmic-override={overrides.rightHandAction}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.rightHandAction,
            {
              [sty.rightHandAction__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rightHandAction__state_defualt]: hasVariant(
                variants,
                "state",
                "defualt"
              ),
              [sty.rightHandAction__state_editMode]: hasVariant(
                variants,
                "state",
                "editMode"
              ),
              [sty.rightHandAction__state_sectionSettings]: hasVariant(
                variants,
                "state",
                "sectionSettings"
              )
            }
          )}
        >
          {hasVariant(variants, "state", "sectionSettings")
            ? "DISCARD CHANGES"
            : hasVariant(variants, "state", "editMode")
            ? "CUSTOMIZE  LAYOUT"
            : "See All"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frame178", "save", "svg", "freeBox", "rightHandAction"],
  frame178: ["frame178", "save", "svg"],
  save: ["save"],
  svg: ["svg"],
  freeBox: ["freeBox"],
  rightHandAction: ["rightHandAction"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame178: "div";
  save: "div";
  svg: "svg";
  freeBox: "div";
  rightHandAction: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionHeader__VariantsArgs;
    args?: PlasmicSectionHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionHeader__Fetches;
  } & Omit<PlasmicSectionHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionHeader__ArgProps,
      internalVariantPropNames: PlasmicSectionHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHeader";
  } else {
    func.displayName = `PlasmicSectionHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHeader = Object.assign(
  // Top-level PlasmicSectionHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame178: makeNodeComponent("frame178"),
    save: makeNodeComponent("save"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    rightHandAction: makeNodeComponent("rightHandAction"),

    // Metadata about props expected for PlasmicSectionHeader
    internalVariantProps: PlasmicSectionHeader__VariantProps,
    internalArgProps: PlasmicSectionHeader__ArgProps
  }
);

export default PlasmicSectionHeader;
/* prettier-ignore-end */
