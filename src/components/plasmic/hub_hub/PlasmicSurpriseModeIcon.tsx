// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: M94oJWBrxO
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSurpriseModeIcon.module.css"; // plasmic-import: M94oJWBrxO/css

import iconCycleView2SBNfbT4Jd from "./images/iconCycleView2.svg"; // plasmic-import: sBNfb_t4jd/picture
import iconCycleViewA9Si9Zdw0Y from "./images/iconCycleView.svg"; // plasmic-import: a9si9Zdw0y/picture

export type PlasmicSurpriseModeIcon__VariantMembers = {
  selected: "selected";
  color: "blue" | "red";
};

export type PlasmicSurpriseModeIcon__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  color?: SingleChoiceArg<"blue" | "red">;
};

type VariantPropType = keyof PlasmicSurpriseModeIcon__VariantsArgs;
export const PlasmicSurpriseModeIcon__VariantProps = new Array<VariantPropType>(
  "selected",
  "color"
);

export type PlasmicSurpriseModeIcon__ArgsType = {};
type ArgPropType = keyof PlasmicSurpriseModeIcon__ArgsType;
export const PlasmicSurpriseModeIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicSurpriseModeIcon__OverridesType = {
  root?: p.Flex<"div">;
  rectangle30?: p.Flex<"div">;
};

export interface DefaultSurpriseModeIconProps {
  selected?: SingleBooleanChoiceArg<"selected">;
  color?: SingleChoiceArg<"blue" | "red">;
  className?: string;
}

function PlasmicSurpriseModeIcon__RenderFunc(props: {
  variants: PlasmicSurpriseModeIcon__VariantsArgs;
  args: PlasmicSurpriseModeIcon__ArgsType;
  overrides: PlasmicSurpriseModeIcon__OverridesType;
  dataFetches?: PlasmicSurpriseModeIcon__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected]: hasVariant(variants, "selected", "selected")
      })}
    >
      {(hasVariant(variants, "color", "red") ? false : true) ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__achw4, {
            [sty.img__color_red__achw4Rz9PY]: hasVariant(
              variants,
              "color",
              "red"
            ),
            [sty.img__selected__achw4Oeozy]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
          role={"img"}
          src={iconCycleView2SBNfbT4Jd}
        />
      ) : null}
      {(hasVariant(variants, "color", "red") ? true : false) ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img___1Gc0L, {
            [sty.img__color_red___1Gc0Lrz9PY]: hasVariant(
              variants,
              "color",
              "red"
            )
          })}
          role={"img"}
          src={iconCycleViewA9Si9Zdw0Y}
        />
      ) : null}
      {(hasVariant(variants, "selected", "selected") ? true : false) ? (
        <div
          data-plasmic-name={"rectangle30"}
          data-plasmic-override={overrides.rectangle30}
          className={classNames(defaultcss.all, sty.rectangle30, {
            [sty.rectangle30__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rectangle30"],
  rectangle30: ["rectangle30"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle30: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSurpriseModeIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSurpriseModeIcon__VariantsArgs;
    args?: PlasmicSurpriseModeIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSurpriseModeIcon__Fetches;
  } & Omit<PlasmicSurpriseModeIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSurpriseModeIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSurpriseModeIcon__ArgProps,
      internalVariantPropNames: PlasmicSurpriseModeIcon__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSurpriseModeIcon__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSurpriseModeIcon";
  } else {
    func.displayName = `PlasmicSurpriseModeIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicSurpriseModeIcon = Object.assign(
  // Top-level PlasmicSurpriseModeIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle30: makeNodeComponent("rectangle30"),

    // Metadata about props expected for PlasmicSurpriseModeIcon
    internalVariantProps: PlasmicSurpriseModeIcon__VariantProps,
    internalArgProps: PlasmicSurpriseModeIcon__ArgProps
  }
);

export default PlasmicSurpriseModeIcon;
/* prettier-ignore-end */
