// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: GsDjn3KkQv
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ItemTwitterFixed from "../../ItemTwitterFixed"; // plasmic-import: iAskgVxM_7/component
import TwitterItem2 from "../../TwitterItem2"; // plasmic-import: NsqqImYviY/component
import TwitterItem from "../../TwitterItem"; // plasmic-import: CnJaIprrDx/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicTwitter.module.css"; // plasmic-import: GsDjn3KkQv/css

export type PlasmicTwitter__VariantMembers = {};

export type PlasmicTwitter__VariantsArgs = {};
type VariantPropType = keyof PlasmicTwitter__VariantsArgs;
export const PlasmicTwitter__VariantProps = new Array<VariantPropType>();

export type PlasmicTwitter__ArgsType = {};
type ArgPropType = keyof PlasmicTwitter__ArgsType;
export const PlasmicTwitter__ArgProps = new Array<ArgPropType>();

export type PlasmicTwitter__OverridesType = {
  root?: p.Flex<"div">;
  twitterItem?: p.Flex<typeof TwitterItem>;
};

export interface DefaultTwitterProps {
  className?: string;
}

function PlasmicTwitter__RenderFunc(props: {
  variants: PlasmicTwitter__VariantsArgs;
  args: PlasmicTwitter__ArgsType;
  overrides: PlasmicTwitter__OverridesType;
  dataFetches?: PlasmicTwitter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__rEHwl
            )}
          />

          <TwitterItem2
            className={classNames("__wab_instance", sty.twitterItem2__ds6Me)}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__mkFQd
            )}
          />

          <TwitterItem2
            className={classNames("__wab_instance", sty.twitterItem2__oBZxM)}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__vxGlG
            )}
          />

          <ItemTwitterFixed
            className={classNames("__wab_instance", sty.itemTwitterFixed__ctpG)}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__sTKsW
            )}
          />

          <TwitterItem2
            className={classNames("__wab_instance", sty.twitterItem2__fLkaw)}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed___4K7BO
            )}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__yzIbR
            )}
          />

          <TwitterItem2
            className={classNames("__wab_instance", sty.twitterItem2__bo9Ac)}
          />

          <TwitterItem
            data-plasmic-name={"twitterItem"}
            data-plasmic-override={overrides.twitterItem}
            className={classNames("__wab_instance", sty.twitterItem)}
          />

          <ItemTwitterFixed
            className={classNames(
              "__wab_instance",
              sty.itemTwitterFixed__asLss
            )}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "twitterItem"],
  twitterItem: ["twitterItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  twitterItem: typeof TwitterItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTwitter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTwitter__VariantsArgs;
    args?: PlasmicTwitter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTwitter__Fetches;
  } & Omit<PlasmicTwitter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTwitter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTwitter__ArgProps,
      internalVariantPropNames: PlasmicTwitter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTwitter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTwitter";
  } else {
    func.displayName = `PlasmicTwitter.${nodeName}`;
  }
  return func;
}

export const PlasmicTwitter = Object.assign(
  // Top-level PlasmicTwitter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    twitterItem: makeNodeComponent("twitterItem"),

    // Metadata about props expected for PlasmicTwitter
    internalVariantProps: PlasmicTwitter__VariantProps,
    internalArgProps: PlasmicTwitter__ArgProps
  }
);

export default PlasmicTwitter;
/* prettier-ignore-end */
