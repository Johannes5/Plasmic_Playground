// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: AN4lA4Fd1A
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicAttentionSelectionBar.module.css"; // plasmic-import: AN4lA4Fd1A/css

export type PlasmicAttentionSelectionBar__VariantMembers = {
  colors: "purple" | "red" | "orange" | "yellow" | "dark";
  deselected: "deselected";
};

export type PlasmicAttentionSelectionBar__VariantsArgs = {
  colors?: SingleChoiceArg<"purple" | "red" | "orange" | "yellow" | "dark">;
  deselected?: SingleBooleanChoiceArg<"deselected">;
};

type VariantPropType = keyof PlasmicAttentionSelectionBar__VariantsArgs;
export const PlasmicAttentionSelectionBar__VariantProps =
  new Array<VariantPropType>("colors", "deselected");

export type PlasmicAttentionSelectionBar__ArgsType = {};
type ArgPropType = keyof PlasmicAttentionSelectionBar__ArgsType;
export const PlasmicAttentionSelectionBar__ArgProps = new Array<ArgPropType>();

export type PlasmicAttentionSelectionBar__OverridesType = {
  root?: p.Flex<"div">;
  highlighter?: p.Flex<"div">;
  bar?: p.Flex<"div">;
};

export interface DefaultAttentionSelectionBarProps {
  colors?: SingleChoiceArg<"purple" | "red" | "orange" | "yellow" | "dark">;
  deselected?: SingleBooleanChoiceArg<"deselected">;
  className?: string;
}

function PlasmicAttentionSelectionBar__RenderFunc(props: {
  variants: PlasmicAttentionSelectionBar__VariantsArgs;
  args: PlasmicAttentionSelectionBar__ArgsType;
  overrides: PlasmicAttentionSelectionBar__OverridesType;
  dataFetches?: PlasmicAttentionSelectionBar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootNotActive, triggerRootNotActiveProps] = useTrigger(
    "usePressed",
    {}
  );
  const triggers = {
    notActive_root: !isRootNotActive
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__colors_yellow]: hasVariant(variants, "colors", "yellow"),
        [sty.root__deselected]: hasVariant(variants, "deselected", "deselected")
      })}
      data-plasmic-trigger-props={[triggerRootNotActiveProps]}
    >
      {(
        triggers.notActive_root
          ? false
          : hasVariant(variants, "deselected", "deselected")
          ? false
          : true
      ) ? (
        <div
          data-plasmic-name={"highlighter"}
          data-plasmic-override={overrides.highlighter}
          className={classNames(defaultcss.all, sty.highlighter, {
            [sty.highlighter__deselected]: hasVariant(
              variants,
              "deselected",
              "deselected"
            )
          })}
        />
      ) : null}

      <div
        data-plasmic-name={"bar"}
        data-plasmic-override={overrides.bar}
        className={classNames(defaultcss.all, sty.bar, {
          [sty.bar__colors_dark]: hasVariant(variants, "colors", "dark"),
          [sty.bar__colors_orange]: hasVariant(variants, "colors", "orange"),
          [sty.bar__colors_red]: hasVariant(variants, "colors", "red"),
          [sty.bar__colors_yellow]: hasVariant(variants, "colors", "yellow"),
          [sty.bar__deselected]: hasVariant(
            variants,
            "deselected",
            "deselected"
          )
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "highlighter", "bar"],
  highlighter: ["highlighter"],
  bar: ["bar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  highlighter: "div";
  bar: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAttentionSelectionBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAttentionSelectionBar__VariantsArgs;
    args?: PlasmicAttentionSelectionBar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAttentionSelectionBar__Fetches;
  } & Omit<PlasmicAttentionSelectionBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAttentionSelectionBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAttentionSelectionBar__ArgProps,
      internalVariantPropNames: PlasmicAttentionSelectionBar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAttentionSelectionBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAttentionSelectionBar";
  } else {
    func.displayName = `PlasmicAttentionSelectionBar.${nodeName}`;
  }
  return func;
}

export const PlasmicAttentionSelectionBar = Object.assign(
  // Top-level PlasmicAttentionSelectionBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    highlighter: makeNodeComponent("highlighter"),
    bar: makeNodeComponent("bar"),

    // Metadata about props expected for PlasmicAttentionSelectionBar
    internalVariantProps: PlasmicAttentionSelectionBar__VariantProps,
    internalArgProps: PlasmicAttentionSelectionBar__ArgProps
  }
);

export default PlasmicAttentionSelectionBar;
/* prettier-ignore-end */
