// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: cYlS9AZba0
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicVideoItem.module.css"; // plasmic-import: cYlS9AZba0/css

import ProgressbarIcon from "./icons/PlasmicIcon__Progressbar"; // plasmic-import: OlLsdl8YS4/icon
import videoThumbnailZTtfMykl from "./images/videoThumbnail.jpeg"; // plasmic-import: -zTTFMykl/picture

export type PlasmicVideoItem__VariantMembers = {
  awaitingMetadata: "awaitingMetadata";
};

export type PlasmicVideoItem__VariantsArgs = {
  awaitingMetadata?: SingleBooleanChoiceArg<"awaitingMetadata">;
};

type VariantPropType = keyof PlasmicVideoItem__VariantsArgs;
export const PlasmicVideoItem__VariantProps = new Array<VariantPropType>(
  "awaitingMetadata"
);

export type PlasmicVideoItem__ArgsType = {
  title?: React.ReactNode;
  channel?: React.ReactNode;
  metadata?: React.ReactNode;
  duration?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVideoItem__ArgsType;
export const PlasmicVideoItem__ArgProps = new Array<ArgPropType>(
  "title",
  "channel",
  "metadata",
  "duration"
);

export type PlasmicVideoItem__OverridesType = {
  root?: p.Flex<"div">;
  videoThumbnail?: p.Flex<"div">;
  img?: p.Flex<"img">;
  svg?: p.Flex<"svg">;
  videoLengthContainer?: p.Flex<"div">;
  videoData?: p.Flex<"div">;
  videoTitle?: p.Flex<"div">;
  videoMetaData?: p.Flex<"div">;
};

export interface DefaultVideoItemProps {
  title?: React.ReactNode;
  channel?: React.ReactNode;
  metadata?: React.ReactNode;
  duration?: React.ReactNode;
  awaitingMetadata?: SingleBooleanChoiceArg<"awaitingMetadata">;
  className?: string;
}

function PlasmicVideoItem__RenderFunc(props: {
  variants: PlasmicVideoItem__VariantsArgs;
  args: PlasmicVideoItem__ArgsType;
  overrides: PlasmicVideoItem__OverridesType;
  dataFetches?: PlasmicVideoItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"videoThumbnail"}
        data-plasmic-override={overrides.videoThumbnail}
        className={classNames(defaultcss.all, sty.videoThumbnail, {
          [sty.videoThumbnail__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
          role={"img"}
          src={videoThumbnailZTtfMykl}
        />

        {false ? (
          <div className={classNames(defaultcss.all, sty.freeBox__io041)}>
            {true ? (
              <ProgressbarIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(defaultcss.all, sty.svg)}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(variants, "awaitingMetadata", "awaitingMetadata")
            ? false
            : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"videoLengthContainer"}
            data-plasmic-override={overrides.videoLengthContainer}
            hasGap={true}
            className={classNames(defaultcss.all, sty.videoLengthContainer, {
              [sty.videoLengthContainer__awaitingMetadata]: hasVariant(
                variants,
                "awaitingMetadata",
                "awaitingMetadata"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__mzbW)}>
              {p.renderPlasmicSlot({
                defaultContents: "11:11",
                value: args.duration,
                className: classNames(sty.slotDuration)
              })}
            </div>
          </p.Stack>
        ) : null}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"videoData"}
        data-plasmic-override={overrides.videoData}
        hasGap={true}
        className={classNames(defaultcss.all, sty.videoData)}
      >
        <div
          data-plasmic-name={"videoTitle"}
          data-plasmic-override={overrides.videoTitle}
          className={classNames(defaultcss.all, sty.videoTitle, {
            [sty.videoTitle__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Readheads are an endangered spiecies in ...",
            value: args.title,
            className: classNames(sty.slotTitle, {
              [sty.slotTitle__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.slotTitle__global_theme_light]: hasVariant(
                globalVariants,
                "theme",
                "light"
              )
            })
          })}
        </div>

        <div
          data-plasmic-name={"videoMetaData"}
          data-plasmic-override={overrides.videoMetaData}
          className={classNames(defaultcss.all, sty.videoMetaData)}
        >
          {(
            hasVariant(variants, "awaitingMetadata", "awaitingMetadata")
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: "BestChannel",
                value: args.channel,
                className: classNames(sty.slotChannel, {
                  [sty.slotChannel__awaitingMetadata]: hasVariant(
                    variants,
                    "awaitingMetadata",
                    "awaitingMetadata"
                  ),
                  [sty.slotChannel__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })
            : null}
          {(
            hasVariant(variants, "awaitingMetadata", "awaitingMetadata")
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: "20K views  -  2 weeks ago",
                value: args.metadata,
                className: classNames(sty.slotMetadata, {
                  [sty.slotMetadata__awaitingMetadata]: hasVariant(
                    variants,
                    "awaitingMetadata",
                    "awaitingMetadata"
                  ),
                  [sty.slotMetadata__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })
            : null}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "videoThumbnail",
    "img",
    "svg",
    "videoLengthContainer",
    "videoData",
    "videoTitle",
    "videoMetaData"
  ],
  videoThumbnail: ["videoThumbnail", "img", "svg", "videoLengthContainer"],
  img: ["img"],
  svg: ["svg"],
  videoLengthContainer: ["videoLengthContainer"],
  videoData: ["videoData", "videoTitle", "videoMetaData"],
  videoTitle: ["videoTitle"],
  videoMetaData: ["videoMetaData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  videoThumbnail: "div";
  img: "img";
  svg: "svg";
  videoLengthContainer: "div";
  videoData: "div";
  videoTitle: "div";
  videoMetaData: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideoItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideoItem__VariantsArgs;
    args?: PlasmicVideoItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicVideoItem__Fetches;
  } & Omit<PlasmicVideoItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVideoItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVideoItem__ArgProps,
      internalVariantPropNames: PlasmicVideoItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicVideoItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideoItem";
  } else {
    func.displayName = `PlasmicVideoItem.${nodeName}`;
  }
  return func;
}

export const PlasmicVideoItem = Object.assign(
  // Top-level PlasmicVideoItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    videoThumbnail: makeNodeComponent("videoThumbnail"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    videoLengthContainer: makeNodeComponent("videoLengthContainer"),
    videoData: makeNodeComponent("videoData"),
    videoTitle: makeNodeComponent("videoTitle"),
    videoMetaData: makeNodeComponent("videoMetaData"),

    // Metadata about props expected for PlasmicVideoItem
    internalVariantProps: PlasmicVideoItem__VariantProps,
    internalArgProps: PlasmicVideoItem__ArgProps
  }
);

export default PlasmicVideoItem;
/* prettier-ignore-end */
