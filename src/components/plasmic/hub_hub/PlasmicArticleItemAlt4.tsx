// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: zkLzVUIAoj
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ArticleItemCardImage from "../../ArticleItemCardImage"; // plasmic-import: zub8z7iFg-/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicArticleItemAlt4.module.css"; // plasmic-import: zkLzVUIAoj/css

import DeviderIcon from "./icons/PlasmicIcon__Devider"; // plasmic-import: p54zAGje4d/icon

export type PlasmicArticleItemAlt4__VariantMembers = {
  composition: "full" | "hideImage" | "hideSnippet" | "titleOnly";
};

export type PlasmicArticleItemAlt4__VariantsArgs = {
  composition?: MultiChoiceArg<
    "full" | "hideImage" | "hideSnippet" | "titleOnly"
  >;
};

type VariantPropType = keyof PlasmicArticleItemAlt4__VariantsArgs;
export const PlasmicArticleItemAlt4__VariantProps = new Array<VariantPropType>(
  "composition"
);

export type PlasmicArticleItemAlt4__ArgsType = {
  title?: React.ReactNode;
  snippet?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicArticleItemAlt4__ArgsType;
export const PlasmicArticleItemAlt4__ArgProps = new Array<ArgPropType>(
  "title",
  "snippet",
  "source",
  "readingTime",
  "date",
  "children"
);

export type PlasmicArticleItemAlt4__OverridesType = {
  root?: p.Flex<"div">;
  articleContent?: p.Flex<"div">;
  titleImage?: p.Flex<"div">;
  metadata?: p.Flex<"div">;
  box?: p.Flex<"div">;
  box2?: p.Flex<"div">;
  box3?: p.Flex<"div">;
  box4?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultArticleItemAlt4Props {
  title?: React.ReactNode;
  snippet?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
  children?: React.ReactNode;
  composition?: MultiChoiceArg<
    "full" | "hideImage" | "hideSnippet" | "titleOnly"
  >;
  className?: string;
}

function PlasmicArticleItemAlt4__RenderFunc(props: {
  variants: PlasmicArticleItemAlt4__VariantsArgs;
  args: PlasmicArticleItemAlt4__ArgsType;
  overrides: PlasmicArticleItemAlt4__OverridesType;
  dataFetches?: PlasmicArticleItemAlt4__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"articleContent"}
        data-plasmic-override={overrides.articleContent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.articleContent, {
          [sty.articleContent__composition_hideImage]: hasVariant(
            variants,
            "composition",
            "hideImage"
          ),
          [sty.articleContent__composition_hideSnippet]: hasVariant(
            variants,
            "composition",
            "hideSnippet"
          ),
          [sty.articleContent__composition_titleOnly]: hasVariant(
            variants,
            "composition",
            "titleOnly"
          ),
          [sty.articleContent__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        {(
          hasVariant(variants, "composition", "titleOnly")
            ? false
            : hasVariant(variants, "composition", "hideImage")
            ? false
            : true
        ) ? (
          <div
            data-plasmic-name={"titleImage"}
            data-plasmic-override={overrides.titleImage}
            className={classNames(defaultcss.all, sty.titleImage, {
              [sty.titleImage__composition_hideImage]: hasVariant(
                variants,
                "composition",
                "hideImage"
              ),
              [sty.titleImage__composition_hideSnippet]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.titleImage__composition_titleOnly]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.titleImage__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__bcvkH)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <ArticleItemCardImage
                    className={classNames(
                      "__wab_instance",
                      sty.articleItemCardImage__qHkhy
                    )}
                  />
                ),

                value: args.children
              })}
            </div>
          </div>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.freeBox__nqOy8, {
            [sty.freeBox__composition_hideSnippet__nqOy8Hf67F]: hasVariant(
              variants,
              "composition",
              "hideSnippet"
            ),
            [sty.freeBox__composition_titleOnly__nqOy8TGreA]: hasVariant(
              variants,
              "composition",
              "titleOnly"
            ),
            [sty.freeBox__global_theme_dark__nqOy8OIz4X]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "The MacBook Pro, iPad mini, and more are discounted at ",
            value: args.title,
            className: classNames(sty.slotTitle, {
              [sty.slotTitle__composition_hideSnippet]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.slotTitle__composition_titleOnly]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.slotTitle__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })
          })}
        </div>

        {(
          hasVariant(variants, "composition", "titleOnly")
            ? false
            : hasVariant(variants, "composition", "hideSnippet")
            ? false
            : true
        ) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__lf40H, {
              [sty.freeBox__composition_hideSnippet__lf40Hhf67F]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.freeBox__composition_titleOnly__lf40HtGreA]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.freeBox__global_theme_dark__lf40HoIz4X]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Your goal in life is to find out the people who need you the most, to finda out the business that needs you the most, to find the project and the art that needs you the most. There is something out there just for you...",
              value: args.snippet,
              className: classNames(sty.slotSnippet, {
                [sty.slotSnippet__composition_hideSnippet]: hasVariant(
                  variants,
                  "composition",
                  "hideSnippet"
                ),
                [sty.slotSnippet__composition_titleOnly]: hasVariant(
                  variants,
                  "composition",
                  "titleOnly"
                ),
                [sty.slotSnippet__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })
            })}
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"metadata"}
          data-plasmic-override={overrides.metadata}
          hasGap={true}
          className={classNames(defaultcss.all, sty.metadata, {
            [sty.metadata__composition_hideSnippet]: hasVariant(
              variants,
              "composition",
              "hideSnippet"
            ),
            [sty.metadata__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <div
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            className={classNames(defaultcss.all, sty.box)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "The Verge",
              value: args.source,
              className: classNames(sty.slotSource, {
                [sty.slotSource__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"box2"}
            data-plasmic-override={overrides.box2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box2)}
          >
            <div
              data-plasmic-name={"box3"}
              data-plasmic-override={overrides.box3}
              className={classNames(defaultcss.all, sty.box3)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "2 min read",
                value: args.readingTime,
                className: classNames(sty.slotReadingTime, {
                  [sty.slotReadingTime__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })}
            </div>

            <div
              data-plasmic-name={"box4"}
              data-plasmic-override={overrides.box4}
              className={classNames(defaultcss.all, sty.box4)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "1 months ago",
                value: args.date,
                className: classNames(sty.slotDate, {
                  [sty.slotDate__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      {false ? (
        <div className={classNames(defaultcss.all, sty.freeBox__jndns)}>
          {true ? (
            <DeviderIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleContent",
    "titleImage",
    "metadata",
    "box",
    "box2",
    "box3",
    "box4",
    "svg"
  ],
  articleContent: [
    "articleContent",
    "titleImage",
    "metadata",
    "box",
    "box2",
    "box3",
    "box4"
  ],
  titleImage: ["titleImage"],
  metadata: ["metadata", "box", "box2", "box3", "box4"],
  box: ["box"],
  box2: ["box2", "box3", "box4"],
  box3: ["box3"],
  box4: ["box4"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleContent: "div";
  titleImage: "div";
  metadata: "div";
  box: "div";
  box2: "div";
  box3: "div";
  box4: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleItemAlt4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleItemAlt4__VariantsArgs;
    args?: PlasmicArticleItemAlt4__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArticleItemAlt4__Fetches;
  } & Omit<PlasmicArticleItemAlt4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArticleItemAlt4__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleItemAlt4__ArgProps,
      internalVariantPropNames: PlasmicArticleItemAlt4__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArticleItemAlt4__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleItemAlt4";
  } else {
    func.displayName = `PlasmicArticleItemAlt4.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleItemAlt4 = Object.assign(
  // Top-level PlasmicArticleItemAlt4 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleContent: makeNodeComponent("articleContent"),
    titleImage: makeNodeComponent("titleImage"),
    metadata: makeNodeComponent("metadata"),
    box: makeNodeComponent("box"),
    box2: makeNodeComponent("box2"),
    box3: makeNodeComponent("box3"),
    box4: makeNodeComponent("box4"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicArticleItemAlt4
    internalVariantProps: PlasmicArticleItemAlt4__VariantProps,
    internalArgProps: PlasmicArticleItemAlt4__ArgProps
  }
);

export default PlasmicArticleItemAlt4;
/* prettier-ignore-end */
