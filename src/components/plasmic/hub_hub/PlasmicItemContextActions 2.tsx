// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: zKuwhXTqKd
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicItemContextActions.module.css"; // plasmic-import: zKuwhXTqKd/css

import IconsOpenIcon from "./icons/PlasmicIcon__IconsOpen"; // plasmic-import: M4gp-x8W5R/icon
import IconsSourcesSavedForLaterIcon from "./icons/PlasmicIcon__IconsSourcesSavedForLater"; // plasmic-import: sGge8vvbDB/icon
import IconsReadAloudIcon from "./icons/PlasmicIcon__IconsReadAloud"; // plasmic-import: -n-EEm7hMV/icon
import IconsShareIcon from "./icons/PlasmicIcon__IconsShare"; // plasmic-import: c8IgV_oMidb/icon
import ThumbLike24RegularIcon from "./icons/PlasmicIcon__ThumbLike24Regular"; // plasmic-import: RfXNTekId3v/icon
import ColorIcon from "./icons/PlasmicIcon__Color"; // plasmic-import: _KuPRXuZAJI/icon
import IconsDeleteIcon from "./icons/PlasmicIcon__IconsDelete"; // plasmic-import: svOIRRDbImq/icon

export type PlasmicItemContextActions__VariantMembers = {};

export type PlasmicItemContextActions__VariantsArgs = {};
type VariantPropType = keyof PlasmicItemContextActions__VariantsArgs;
export const PlasmicItemContextActions__VariantProps =
  new Array<VariantPropType>();

export type PlasmicItemContextActions__ArgsType = {};
type ArgPropType = keyof PlasmicItemContextActions__ArgsType;
export const PlasmicItemContextActions__ArgProps = new Array<ArgPropType>();

export type PlasmicItemContextActions__OverridesType = {
  root?: p.Flex<"div">;
  itemContextActions?: p.Flex<"div">;
  contextActionItems?: p.Flex<"div">;
  contextActionItem?: p.Flex<"div">;
  contextActionText?: p.Flex<"div">;
  contextActionItem2?: p.Flex<"div">;
  contextActionItem3?: p.Flex<"div">;
  contextActionItem4?: p.Flex<"div">;
  contextActionItem5?: p.Flex<"div">;
  iconsPriority?: p.Flex<"div">;
  contextActionItem6?: p.Flex<"div">;
};

export interface DefaultItemContextActionsProps {
  className?: string;
}

function PlasmicItemContextActions__RenderFunc(props: {
  variants: PlasmicItemContextActions__VariantsArgs;
  args: PlasmicItemContextActions__ArgsType;
  overrides: PlasmicItemContextActions__OverridesType;
  dataFetches?: PlasmicItemContextActions__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"itemContextActions"}
        data-plasmic-override={overrides.itemContextActions}
        hasGap={true}
        className={classNames(defaultcss.all, sty.itemContextActions)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contextActionItems"}
          data-plasmic-override={overrides.contextActionItems}
          hasGap={true}
          className={classNames(defaultcss.all, sty.contextActionItems)}
        >
          <div
            data-plasmic-name={"contextActionItem"}
            data-plasmic-override={overrides.contextActionItem}
            className={classNames(defaultcss.all, sty.contextActionItem)}
          >
            <div
              data-plasmic-name={"contextActionText"}
              data-plasmic-override={overrides.contextActionText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.contextActionText
              )}
            >
              {"Open"}
            </div>

            <IconsOpenIcon
              className={classNames(defaultcss.all, sty.svg__tohJn)}
              role={"img"}
            />
          </div>

          <div
            data-plasmic-name={"contextActionItem2"}
            data-plasmic-override={overrides.contextActionItem2}
            className={classNames(defaultcss.all, sty.contextActionItem2)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__szdZ3
              )}
            >
              {"Save for later"}
            </div>

            <IconsSourcesSavedForLaterIcon
              className={classNames(defaultcss.all, sty.svg__yaZ9J)}
              role={"img"}
            />
          </div>

          <div
            data-plasmic-name={"contextActionItem3"}
            data-plasmic-override={overrides.contextActionItem3}
            className={classNames(defaultcss.all, sty.contextActionItem3)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__sV6Jy
              )}
            >
              {"Read aloud"}
            </div>

            <IconsReadAloudIcon
              className={classNames(defaultcss.all, sty.svg___9WqxD)}
              role={"img"}
            />
          </div>

          <div
            data-plasmic-name={"contextActionItem4"}
            data-plasmic-override={overrides.contextActionItem4}
            className={classNames(defaultcss.all, sty.contextActionItem4)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__iIzma
              )}
            >
              {"Share"}
            </div>

            <IconsShareIcon
              className={classNames(defaultcss.all, sty.svg__aBw6Q)}
              role={"img"}
            />
          </div>

          <div
            data-plasmic-name={"contextActionItem5"}
            data-plasmic-override={overrides.contextActionItem5}
            className={classNames(defaultcss.all, sty.contextActionItem5)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__xe7Gy
              )}
            >
              {"Adjust attention"}
            </div>

            <div
              data-plasmic-name={"iconsPriority"}
              data-plasmic-override={overrides.iconsPriority}
              className={classNames(defaultcss.all, sty.iconsPriority)}
            >
              <ThumbLike24RegularIcon
                className={classNames(defaultcss.all, sty.svg__onps8)}
                role={"img"}
              />

              <ColorIcon
                className={classNames(defaultcss.all, sty.svg__sNelW)}
                role={"img"}
              />
            </div>
          </div>

          <div
            data-plasmic-name={"contextActionItem6"}
            data-plasmic-override={overrides.contextActionItem6}
            className={classNames(defaultcss.all, sty.contextActionItem6)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__m8Wyp
              )}
            >
              {"Remove"}
            </div>

            <IconsDeleteIcon
              className={classNames(defaultcss.all, sty.svg__oFbAs)}
              role={"img"}
            />
          </div>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "itemContextActions",
    "contextActionItems",
    "contextActionItem",
    "contextActionText",
    "contextActionItem2",
    "contextActionItem3",
    "contextActionItem4",
    "contextActionItem5",
    "iconsPriority",
    "contextActionItem6"
  ],
  itemContextActions: [
    "itemContextActions",
    "contextActionItems",
    "contextActionItem",
    "contextActionText",
    "contextActionItem2",
    "contextActionItem3",
    "contextActionItem4",
    "contextActionItem5",
    "iconsPriority",
    "contextActionItem6"
  ],
  contextActionItems: [
    "contextActionItems",
    "contextActionItem",
    "contextActionText",
    "contextActionItem2",
    "contextActionItem3",
    "contextActionItem4",
    "contextActionItem5",
    "iconsPriority",
    "contextActionItem6"
  ],
  contextActionItem: ["contextActionItem", "contextActionText"],
  contextActionText: ["contextActionText"],
  contextActionItem2: ["contextActionItem2"],
  contextActionItem3: ["contextActionItem3"],
  contextActionItem4: ["contextActionItem4"],
  contextActionItem5: ["contextActionItem5", "iconsPriority"],
  iconsPriority: ["iconsPriority"],
  contextActionItem6: ["contextActionItem6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  itemContextActions: "div";
  contextActionItems: "div";
  contextActionItem: "div";
  contextActionText: "div";
  contextActionItem2: "div";
  contextActionItem3: "div";
  contextActionItem4: "div";
  contextActionItem5: "div";
  iconsPriority: "div";
  contextActionItem6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemContextActions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemContextActions__VariantsArgs;
    args?: PlasmicItemContextActions__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicItemContextActions__Fetches;
  } & Omit<PlasmicItemContextActions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItemContextActions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicItemContextActions__ArgProps,
      internalVariantPropNames: PlasmicItemContextActions__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicItemContextActions__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemContextActions";
  } else {
    func.displayName = `PlasmicItemContextActions.${nodeName}`;
  }
  return func;
}

export const PlasmicItemContextActions = Object.assign(
  // Top-level PlasmicItemContextActions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    itemContextActions: makeNodeComponent("itemContextActions"),
    contextActionItems: makeNodeComponent("contextActionItems"),
    contextActionItem: makeNodeComponent("contextActionItem"),
    contextActionText: makeNodeComponent("contextActionText"),
    contextActionItem2: makeNodeComponent("contextActionItem2"),
    contextActionItem3: makeNodeComponent("contextActionItem3"),
    contextActionItem4: makeNodeComponent("contextActionItem4"),
    contextActionItem5: makeNodeComponent("contextActionItem5"),
    iconsPriority: makeNodeComponent("iconsPriority"),
    contextActionItem6: makeNodeComponent("contextActionItem6"),

    // Metadata about props expected for PlasmicItemContextActions
    internalVariantProps: PlasmicItemContextActions__VariantProps,
    internalArgProps: PlasmicItemContextActions__ArgProps
  }
);

export default PlasmicItemContextActions;
/* prettier-ignore-end */
