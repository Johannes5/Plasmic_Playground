// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: ekCI6uEpVU
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SourceItem from "../../SourceItem"; // plasmic-import: U1WSll_dgG/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSeeAllSourceItemList.module.css"; // plasmic-import: ekCI6uEpVU/css

import IconarrowIosLeft2Icon from "./icons/PlasmicIcon__IconarrowIosLeft2"; // plasmic-import: Snqml0Rz7e/icon

export type PlasmicSeeAllSourceItemList__VariantMembers = {
  scrollborder: "right" | "left";
  wrap: "wrap";
};

export type PlasmicSeeAllSourceItemList__VariantsArgs = {
  scrollborder?: MultiChoiceArg<"right" | "left">;
  wrap?: SingleBooleanChoiceArg<"wrap">;
};

type VariantPropType = keyof PlasmicSeeAllSourceItemList__VariantsArgs;
export const PlasmicSeeAllSourceItemList__VariantProps =
  new Array<VariantPropType>("scrollborder", "wrap");

export type PlasmicSeeAllSourceItemList__ArgsType = {};
type ArgPropType = keyof PlasmicSeeAllSourceItemList__ArgsType;
export const PlasmicSeeAllSourceItemList__ArgProps = new Array<ArgPropType>();

export type PlasmicSeeAllSourceItemList__OverridesType = {
  root?: p.Flex<"div">;
  seeAllSourceItemContainer?: p.Flex<"div">;
  sourceItemContainer?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultSeeAllSourceItemListProps {
  scrollborder?: MultiChoiceArg<"right" | "left">;
  wrap?: SingleBooleanChoiceArg<"wrap">;
  className?: string;
}

function PlasmicSeeAllSourceItemList__RenderFunc(props: {
  variants: PlasmicSeeAllSourceItemList__VariantsArgs;
  args: PlasmicSeeAllSourceItemList__ArgsType;
  overrides: PlasmicSeeAllSourceItemList__OverridesType;
  dataFetches?: PlasmicSeeAllSourceItemList__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"seeAllSourceItemContainer"}
        data-plasmic-override={overrides.seeAllSourceItemContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.seeAllSourceItemContainer)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sourceItemContainer"}
          data-plasmic-override={overrides.sourceItemContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sourceItemContainer, {
            [sty.sourceItemContainer__scrollborder_left]: hasVariant(
              variants,
              "scrollborder",
              "left"
            ),
            [sty.sourceItemContainer__scrollborder_right]: hasVariant(
              variants,
              "scrollborder",
              "right"
            ),
            [sty.sourceItemContainer__wrap]: hasVariant(
              variants,
              "wrap",
              "wrap"
            )
          })}
        >
          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem__dswOp)}
            variants2={"editing" as const}
          />

          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem__ah9Tj)}
            variants2={"_default" as const}
          />

          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem__uRPn)}
            variants2={"_default" as const}
          />

          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem__mEpY1, {
              [sty.sourceItem__scrollborder_left__mEpY1A3N06]: hasVariant(
                variants,
                "scrollborder",
                "left"
              )
            })}
            variants2={"_default" as const}
          />

          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem___8YpNw, {
              [sty.sourceItem__wrap___8YpNwhfWsD]: hasVariant(
                variants,
                "wrap",
                "wrap"
              )
            })}
            variants2={"_default" as const}
          />

          <SourceItem
            className={classNames("__wab_instance", sty.sourceItem__frKg8, {
              [sty.sourceItem__scrollborder_right__frKg8Pa6Fw]: hasVariant(
                variants,
                "scrollborder",
                "right"
              )
            })}
            variants2={"_default" as const}
          />
        </p.Stack>

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, sty.freeBox)}
        >
          <IconarrowIosLeft2Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "seeAllSourceItemContainer",
    "sourceItemContainer",
    "freeBox",
    "svg"
  ],
  seeAllSourceItemContainer: [
    "seeAllSourceItemContainer",
    "sourceItemContainer",
    "freeBox",
    "svg"
  ],
  sourceItemContainer: ["sourceItemContainer"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  seeAllSourceItemContainer: "div";
  sourceItemContainer: "div";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSeeAllSourceItemList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSeeAllSourceItemList__VariantsArgs;
    args?: PlasmicSeeAllSourceItemList__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSeeAllSourceItemList__Fetches;
  } & Omit<PlasmicSeeAllSourceItemList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSeeAllSourceItemList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSeeAllSourceItemList__ArgProps,
      internalVariantPropNames: PlasmicSeeAllSourceItemList__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSeeAllSourceItemList__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSeeAllSourceItemList";
  } else {
    func.displayName = `PlasmicSeeAllSourceItemList.${nodeName}`;
  }
  return func;
}

export const PlasmicSeeAllSourceItemList = Object.assign(
  // Top-level PlasmicSeeAllSourceItemList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    seeAllSourceItemContainer: makeNodeComponent("seeAllSourceItemContainer"),
    sourceItemContainer: makeNodeComponent("sourceItemContainer"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSeeAllSourceItemList
    internalVariantProps: PlasmicSeeAllSourceItemList__VariantProps,
    internalArgProps: PlasmicSeeAllSourceItemList__ArgProps
  }
);

export default PlasmicSeeAllSourceItemList;
/* prettier-ignore-end */
