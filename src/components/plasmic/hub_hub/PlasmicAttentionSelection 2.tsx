// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: gxplQWBh0N
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AttentionSelectionBar from "../../AttentionSelectionBar"; // plasmic-import: AN4lA4Fd1A/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicAttentionSelection.module.css"; // plasmic-import: gxplQWBh0N/css

import Iconinfo2Icon from "./icons/PlasmicIcon__Iconinfo2"; // plasmic-import: BWVpjBn8gv/icon

export type PlasmicAttentionSelection__VariantMembers = {
  saveButton: "saveButton";
};

export type PlasmicAttentionSelection__VariantsArgs = {
  saveButton?: SingleBooleanChoiceArg<"saveButton">;
};

type VariantPropType = keyof PlasmicAttentionSelection__VariantsArgs;
export const PlasmicAttentionSelection__VariantProps =
  new Array<VariantPropType>("saveButton");

export type PlasmicAttentionSelection__ArgsType = {};
type ArgPropType = keyof PlasmicAttentionSelection__ArgsType;
export const PlasmicAttentionSelection__ArgProps = new Array<ArgPropType>();

export type PlasmicAttentionSelection__OverridesType = {
  root?: p.Flex<"div">;
  attentionSelection?: p.Flex<"div">;
  attentionPriorityLevels?: p.Flex<"div">;
  bars?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultAttentionSelectionProps {
  saveButton?: SingleBooleanChoiceArg<"saveButton">;
  className?: string;
}

function PlasmicAttentionSelection__RenderFunc(props: {
  variants: PlasmicAttentionSelection__VariantsArgs;
  args: PlasmicAttentionSelection__ArgsType;
  overrides: PlasmicAttentionSelection__OverridesType;
  dataFetches?: PlasmicAttentionSelection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__saveButton]: hasVariant(variants, "saveButton", "saveButton")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"attentionSelection"}
        data-plasmic-override={overrides.attentionSelection}
        hasGap={true}
        className={classNames(defaultcss.all, sty.attentionSelection, {
          [sty.attentionSelection__saveButton]: hasVariant(
            variants,
            "saveButton",
            "saveButton"
          )
        })}
      >
        <div
          data-plasmic-name={"attentionPriorityLevels"}
          data-plasmic-override={overrides.attentionPriorityLevels}
          className={classNames(defaultcss.all, sty.attentionPriorityLevels, {
            [sty.attentionPriorityLevels__saveButton]: hasVariant(
              variants,
              "saveButton",
              "saveButton"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__z1FFd
            )}
          >
            {"inactive"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__h39Cg
            )}
          >
            {"rare"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__qvhLl
            )}
          >
            {"high priority"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"bars"}
            data-plasmic-override={overrides.bars}
            hasGap={true}
            className={classNames(defaultcss.all, sty.bars)}
          >
            <AttentionSelectionBar
              className={classNames(
                "__wab_instance",
                sty.attentionSelectionBar__tm8SQ
              )}
              colors={"dark" as const}
              deselected={"deselected" as const}
            />

            <AttentionSelectionBar
              className={classNames(
                "__wab_instance",
                sty.attentionSelectionBar__soAwF
              )}
              colors={"yellow" as const}
              deselected={"deselected" as const}
            />

            <AttentionSelectionBar
              className={classNames(
                "__wab_instance",
                sty.attentionSelectionBar__hkPpo
              )}
              colors={"orange" as const}
              deselected={"deselected" as const}
            />

            <AttentionSelectionBar
              className={classNames(
                "__wab_instance",
                sty.attentionSelectionBar__w2AWd
              )}
              colors={"red" as const}
              deselected={"deselected" as const}
            />

            <AttentionSelectionBar
              className={classNames(
                "__wab_instance",
                sty.attentionSelectionBar__gUb8Z
              )}
            />
          </p.Stack>
        </div>

        <Iconinfo2Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </p.Stack>

      {(hasVariant(variants, "saveButton", "saveButton") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__pSyEi,
            {
              [sty.freeBox__saveButton__pSyEia2HFy]: hasVariant(
                variants,
                "saveButton",
                "saveButton"
              )
            }
          )}
        >
          {hasVariant(variants, "saveButton", "saveButton")
            ? "save"
            : "Enter some text"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "attentionSelection",
    "attentionPriorityLevels",
    "bars",
    "svg"
  ],
  attentionSelection: [
    "attentionSelection",
    "attentionPriorityLevels",
    "bars",
    "svg"
  ],
  attentionPriorityLevels: ["attentionPriorityLevels", "bars"],
  bars: ["bars"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  attentionSelection: "div";
  attentionPriorityLevels: "div";
  bars: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAttentionSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAttentionSelection__VariantsArgs;
    args?: PlasmicAttentionSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAttentionSelection__Fetches;
  } & Omit<PlasmicAttentionSelection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAttentionSelection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAttentionSelection__ArgProps,
      internalVariantPropNames: PlasmicAttentionSelection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAttentionSelection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAttentionSelection";
  } else {
    func.displayName = `PlasmicAttentionSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicAttentionSelection = Object.assign(
  // Top-level PlasmicAttentionSelection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    attentionSelection: makeNodeComponent("attentionSelection"),
    attentionPriorityLevels: makeNodeComponent("attentionPriorityLevels"),
    bars: makeNodeComponent("bars"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAttentionSelection
    internalVariantProps: PlasmicAttentionSelection__VariantProps,
    internalArgProps: PlasmicAttentionSelection__ArgProps
  }
);

export default PlasmicAttentionSelection;
/* prettier-ignore-end */
