// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: U1WSll_dgG
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AttentionSelection from "../../AttentionSelection"; // plasmic-import: gxplQWBh0N/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSourceItem.module.css"; // plasmic-import: U1WSll_dgG/css

import SourceItemImageIcon from "./icons/PlasmicIcon__SourceItemImage"; // plasmic-import: yYWfAbrHim/icon
import Iconinfo3Icon from "./icons/PlasmicIcon__Iconinfo3"; // plasmic-import: o9B5nhF6rJ/icon
import IconsDelete3Icon from "./icons/PlasmicIcon__IconsDelete3"; // plasmic-import: AzexPCCfcb/icon
import addCircle2L3ChOfIkTc from "./images/addCircle2.svg"; // plasmic-import: l3chOfIkTc/picture

export type PlasmicSourceItem__VariantMembers = {
  variants2:
    | "addingWithDescription"
    | "adding"
    | "_default"
    | "editing"
    | "attentionSelection";
};

export type PlasmicSourceItem__VariantsArgs = {
  variants2?: SingleChoiceArg<
    | "addingWithDescription"
    | "adding"
    | "_default"
    | "editing"
    | "attentionSelection"
  >;
};

type VariantPropType = keyof PlasmicSourceItem__VariantsArgs;
export const PlasmicSourceItem__VariantProps = new Array<VariantPropType>(
  "variants2"
);

export type PlasmicSourceItem__ArgsType = {};
type ArgPropType = keyof PlasmicSourceItem__ArgsType;
export const PlasmicSourceItem__ArgProps = new Array<ArgPropType>();

export type PlasmicSourceItem__OverridesType = {
  root?: p.Flex<"div">;
  sourceItemContainer?: p.Flex<"div">;
  sourceItemAttentionLevel?: p.Flex<"div">;
  sourceItemAddCircle?: p.Flex<"img">;
  sourceItem?: p.Flex<"div">;
  sourceItemInner?: p.Flex<"div">;
  attentionSelection?: p.Flex<typeof AttentionSelection>;
  sourceItemTexts?: p.Flex<"div">;
  title?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  handle?: p.Flex<"div">;
  handle2?: p.Flex<"div">;
  edit?: p.Flex<"div">;
  adjustAttentionButton?: p.Flex<"div">;
  adjustAttention?: p.Flex<"div">;
  sourceItemDescription?: p.Flex<"div">;
};

export interface DefaultSourceItemProps {
  variants2?: SingleChoiceArg<
    | "addingWithDescription"
    | "adding"
    | "_default"
    | "editing"
    | "attentionSelection"
  >;
  className?: string;
}

function PlasmicSourceItem__RenderFunc(props: {
  variants: PlasmicSourceItem__VariantsArgs;
  args: PlasmicSourceItem__ArgsType;
  overrides: PlasmicSourceItem__OverridesType;
  dataFetches?: PlasmicSourceItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"sourceItemContainer"}
        data-plasmic-override={overrides.sourceItemContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.sourceItemContainer, {
          [sty.sourceItemContainer__variants2__default]: hasVariant(
            variants,
            "variants2",
            "_default"
          ),
          [sty.sourceItemContainer__variants2_attentionSelection]: hasVariant(
            variants,
            "variants2",
            "attentionSelection"
          ),
          [sty.sourceItemContainer__variants2_editing]: hasVariant(
            variants,
            "variants2",
            "editing"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sourceItemAttentionLevel"}
          data-plasmic-override={overrides.sourceItemAttentionLevel}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sourceItemAttentionLevel, {
            [sty.sourceItemAttentionLevel__variants2__default]: hasVariant(
              variants,
              "variants2",
              "_default"
            ),
            [sty.sourceItemAttentionLevel__variants2_adding]: hasVariant(
              variants,
              "variants2",
              "adding"
            ),
            [sty.sourceItemAttentionLevel__variants2_attentionSelection]:
              hasVariant(variants, "variants2", "attentionSelection"),
            [sty.sourceItemAttentionLevel__variants2_editing]: hasVariant(
              variants,
              "variants2",
              "editing"
            )
          })}
        >
          {(
            hasVariant(variants, "variants2", "attentionSelection")
              ? false
              : hasVariant(variants, "variants2", "editing")
              ? false
              : hasVariant(variants, "variants2", "_default")
              ? false
              : true
          ) ? (
            <img
              data-plasmic-name={"sourceItemAddCircle"}
              data-plasmic-override={overrides.sourceItemAddCircle}
              alt={""}
              className={classNames(defaultcss.img, sty.sourceItemAddCircle, {
                [sty.sourceItemAddCircle__variants2__default]: hasVariant(
                  variants,
                  "variants2",
                  "_default"
                ),
                [sty.sourceItemAddCircle__variants2_adding]: hasVariant(
                  variants,
                  "variants2",
                  "adding"
                ),
                [sty.sourceItemAddCircle__variants2_attentionSelection]:
                  hasVariant(variants, "variants2", "attentionSelection"),
                [sty.sourceItemAddCircle__variants2_editing]: hasVariant(
                  variants,
                  "variants2",
                  "editing"
                )
              })}
              role={"img"}
              src={addCircle2L3ChOfIkTc}
            />
          ) : null}
        </p.Stack>

        <div
          data-plasmic-name={"sourceItem"}
          data-plasmic-override={overrides.sourceItem}
          className={classNames(defaultcss.all, sty.sourceItem, {
            [sty.sourceItem__variants2_attentionSelection]: hasVariant(
              variants,
              "variants2",
              "attentionSelection"
            ),
            [sty.sourceItem__variants2_editing]: hasVariant(
              variants,
              "variants2",
              "editing"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"sourceItemInner"}
            data-plasmic-override={overrides.sourceItemInner}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sourceItemInner, {
              [sty.sourceItemInner__variants2_attentionSelection]: hasVariant(
                variants,
                "variants2",
                "attentionSelection"
              ),
              [sty.sourceItemInner__variants2_editing]: hasVariant(
                variants,
                "variants2",
                "editing"
              )
            })}
          >
            <SourceItemImageIcon
              className={classNames(defaultcss.all, sty.svg__rXyMx, {
                [sty.svg__variants2_attentionSelection__rXyMxaQs6Q]: hasVariant(
                  variants,
                  "variants2",
                  "attentionSelection"
                ),
                [sty.svg__variants2_editing__rXyMXjnBbX]: hasVariant(
                  variants,
                  "variants2",
                  "editing"
                )
              })}
              role={"img"}
            />

            {(
              hasVariant(variants, "variants2", "attentionSelection")
                ? true
                : false
            ) ? (
              <AttentionSelection
                data-plasmic-name={"attentionSelection"}
                data-plasmic-override={overrides.attentionSelection}
                className={classNames(
                  "__wab_instance",
                  sty.attentionSelection,
                  {
                    [sty.attentionSelection__variants2_attentionSelection]:
                      hasVariant(variants, "variants2", "attentionSelection")
                  }
                )}
              />
            ) : null}
            {(
              hasVariant(variants, "variants2", "attentionSelection")
                ? false
                : hasVariant(variants, "variants2", "editing")
                ? true
                : false
            ) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox__aqQx, {
                  [sty.freeBox__variants2_attentionSelection__aqQxAQs6Q]:
                    hasVariant(variants, "variants2", "attentionSelection"),
                  [sty.freeBox__variants2_editing__aqQxJnBbX]: hasVariant(
                    variants,
                    "variants2",
                    "editing"
                  )
                })}
              >
                {(
                  hasVariant(variants, "variants2", "attentionSelection")
                    ? true
                    : hasVariant(variants, "variants2", "editing")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___9CT8U,
                      {
                        [sty.freeBox__variants2_attentionSelection___9CT8UaQs6Q]:
                          hasVariant(
                            variants,
                            "variants2",
                            "attentionSelection"
                          ),
                        [sty.freeBox__variants2_editing___9CT8UjnBbX]:
                          hasVariant(variants, "variants2", "editing")
                      }
                    )}
                  >
                    {hasVariant(variants, "variants2", "attentionSelection")
                      ? "adjust attention"
                      : hasVariant(variants, "variants2", "editing")
                      ? "adjust attention"
                      : "Enter some text"}
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "variants2", "attentionSelection")
                    ? true
                    : hasVariant(variants, "variants2", "editing")
                    ? true
                    : false
                ) ? (
                  <Iconinfo3Icon
                    className={classNames(defaultcss.all, sty.svg__klmhW, {
                      [sty.svg__variants2_attentionSelection__klmhWaQs6Q]:
                        hasVariant(variants, "variants2", "attentionSelection"),
                      [sty.svg__variants2_editing__klmhWjnBbX]: hasVariant(
                        variants,
                        "variants2",
                        "editing"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(variants, "variants2", "attentionSelection")
                ? false
                : hasVariant(variants, "variants2", "editing")
                ? false
                : true
            ) ? (
              <div
                data-plasmic-name={"sourceItemTexts"}
                data-plasmic-override={overrides.sourceItemTexts}
                className={classNames(defaultcss.all, sty.sourceItemTexts, {
                  [sty.sourceItemTexts__variants2_attentionSelection]:
                    hasVariant(variants, "variants2", "attentionSelection"),
                  [sty.sourceItemTexts__variants2_editing]: hasVariant(
                    variants,
                    "variants2",
                    "editing"
                  )
                })}
              >
                <div
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames(defaultcss.all, sty.title)}
                >
                  <div
                    data-plasmic-name={"title2"}
                    data-plasmic-override={overrides.title2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.title2,
                      {
                        [sty.title2__variants2_attentionSelection]: hasVariant(
                          variants,
                          "variants2",
                          "attentionSelection"
                        ),
                        [sty.title2__variants2_editing]: hasVariant(
                          variants,
                          "variants2",
                          "editing"
                        )
                      }
                    )}
                  >
                    {"Chris Sacca"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"handle"}
                  data-plasmic-override={overrides.handle}
                  className={classNames(defaultcss.all, sty.handle, {
                    [sty.handle__variants2_attentionSelection]: hasVariant(
                      variants,
                      "variants2",
                      "attentionSelection"
                    ),
                    [sty.handle__variants2_editing]: hasVariant(
                      variants,
                      "variants2",
                      "editing"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"handle2"}
                    data-plasmic-override={overrides.handle2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.handle2,
                      {
                        [sty.handle2__variants2__default]: hasVariant(
                          variants,
                          "variants2",
                          "_default"
                        ),
                        [sty.handle2__variants2_attentionSelection]: hasVariant(
                          variants,
                          "variants2",
                          "attentionSelection"
                        ),
                        [sty.handle2__variants2_editing]: hasVariant(
                          variants,
                          "variants2",
                          "editing"
                        )
                      }
                    )}
                  >
                    {"@sacca"}
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant(variants, "variants2", "attentionSelection")
                ? false
                : hasVariant(variants, "variants2", "editing")
                ? false
                : false
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"edit"}
                data-plasmic-override={overrides.edit}
                hasGap={true}
                className={classNames(defaultcss.all, sty.edit, {
                  [sty.edit__variants2_attentionSelection]: hasVariant(
                    variants,
                    "variants2",
                    "attentionSelection"
                  ),
                  [sty.edit__variants2_editing]: hasVariant(
                    variants,
                    "variants2",
                    "editing"
                  )
                })}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"adjustAttentionButton"}
                  data-plasmic-override={overrides.adjustAttentionButton}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.adjustAttentionButton,
                    {
                      [sty.adjustAttentionButton__variants2_attentionSelection]:
                        hasVariant(variants, "variants2", "attentionSelection"),
                      [sty.adjustAttentionButton__variants2_editing]:
                        hasVariant(variants, "variants2", "editing")
                    }
                  )}
                >
                  <div
                    data-plasmic-name={"adjustAttention"}
                    data-plasmic-override={overrides.adjustAttention}
                    className={classNames(defaultcss.all, sty.adjustAttention, {
                      [sty.adjustAttention__variants2_attentionSelection]:
                        hasVariant(variants, "variants2", "attentionSelection"),
                      [sty.adjustAttention__variants2_editing]: hasVariant(
                        variants,
                        "variants2",
                        "editing"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__yigYs,
                        {
                          [sty.freeBox__variants2_attentionSelection__yigYsaQs6Q]:
                            hasVariant(
                              variants,
                              "variants2",
                              "attentionSelection"
                            ),
                          [sty.freeBox__variants2_editing__yigYSjnBbX]:
                            hasVariant(variants, "variants2", "editing")
                        }
                      )}
                    >
                      {"adjust attention"}
                    </div>
                  </div>

                  {(
                    hasVariant(variants, "variants2", "attentionSelection")
                      ? false
                      : hasVariant(variants, "variants2", "editing")
                      ? false
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        defaultcss.all,
                        sty.freeBox__wEmDu,
                        {
                          [sty.freeBox__variants2_attentionSelection__wEmDuaQs6Q]:
                            hasVariant(
                              variants,
                              "variants2",
                              "attentionSelection"
                            ),
                          [sty.freeBox__variants2_editing__wEmDUjnBbX]:
                            hasVariant(variants, "variants2", "editing")
                        }
                      )}
                    />
                  ) : null}
                  {(
                    hasVariant(variants, "variants2", "attentionSelection")
                      ? true
                      : hasVariant(variants, "variants2", "editing")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        defaultcss.all,
                        sty.freeBox___9MibO,
                        {
                          [sty.freeBox__variants2_attentionSelection___9MibOaQs6Q]:
                            hasVariant(
                              variants,
                              "variants2",
                              "attentionSelection"
                            ),
                          [sty.freeBox__variants2_editing___9MibOjnBbX]:
                            hasVariant(variants, "variants2", "editing")
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "variants2", "attentionSelection")
                          ? true
                          : hasVariant(variants, "variants2", "editing")
                          ? true
                          : false
                      ) ? (
                        <Iconinfo3Icon
                          className={classNames(
                            defaultcss.all,
                            sty.svg__xLeCh,
                            {
                              [sty.svg__variants2_attentionSelection__xLeChaQs6Q]:
                                hasVariant(
                                  variants,
                                  "variants2",
                                  "attentionSelection"
                                ),
                              [sty.svg__variants2_editing__xLeCHjnBbX]:
                                hasVariant(variants, "variants2", "editing")
                            }
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>

                {(
                  hasVariant(variants, "variants2", "attentionSelection")
                    ? true
                    : hasVariant(variants, "variants2", "editing")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__fIvr, {
                      [sty.freeBox__variants2_attentionSelection__fIvraQs6Q]:
                        hasVariant(variants, "variants2", "attentionSelection"),
                      [sty.freeBox__variants2_editing__fIvRjnBbX]: hasVariant(
                        variants,
                        "variants2",
                        "editing"
                      )
                    })}
                  >
                    {(
                      hasVariant(variants, "variants2", "attentionSelection")
                        ? true
                        : hasVariant(variants, "variants2", "editing")
                        ? true
                        : false
                    ) ? (
                      <IconsDelete3Icon
                        className={classNames(defaultcss.all, sty.svg__lg79I, {
                          [sty.svg__variants2_attentionSelection__lg79IaQs6Q]:
                            hasVariant(
                              variants,
                              "variants2",
                              "attentionSelection"
                            ),
                          [sty.svg__variants2_editing__lg79IjnBbX]: hasVariant(
                            variants,
                            "variants2",
                            "editing"
                          )
                        })}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "variants2", "attentionSelection")
                ? false
                : hasVariant(variants, "variants2", "editing")
                ? true
                : false
            ) ? (
              <IconsDelete3Icon
                className={classNames(defaultcss.all, sty.svg__zdWk, {
                  [sty.svg__variants2_attentionSelection__zdWkAQs6Q]:
                    hasVariant(variants, "variants2", "attentionSelection"),
                  [sty.svg__variants2_editing__zdWkjnBbX]: hasVariant(
                    variants,
                    "variants2",
                    "editing"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          {(
            hasVariant(variants, "variants2", "attentionSelection")
              ? false
              : hasVariant(variants, "variants2", "editing")
              ? false
              : hasVariant(variants, "variants2", "_default")
              ? false
              : hasVariant(variants, "variants2", "adding")
              ? false
              : true
          ) ? (
            <div
              data-plasmic-name={"sourceItemDescription"}
              data-plasmic-override={overrides.sourceItemDescription}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.sourceItemDescription,
                {
                  [sty.sourceItemDescription__variants2__default]: hasVariant(
                    variants,
                    "variants2",
                    "_default"
                  ),
                  [sty.sourceItemDescription__variants2_adding]: hasVariant(
                    variants,
                    "variants2",
                    "adding"
                  ),
                  [sty.sourceItemDescription__variants2_attentionSelection]:
                    hasVariant(variants, "variants2", "attentionSelection"),
                  [sty.sourceItemDescription__variants2_editing]: hasVariant(
                    variants,
                    "variants2",
                    "editing"
                  )
                }
              )}
            >
              {
                "I love @crystale & our 3 girls. Used to invest in startups. Had fun on @ABCSharkTank. Working hard to unf**k the planet."
              }
            </div>
          ) : null}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sourceItemContainer",
    "sourceItemAttentionLevel",
    "sourceItemAddCircle",
    "sourceItem",
    "sourceItemInner",
    "attentionSelection",
    "sourceItemTexts",
    "title",
    "title2",
    "handle",
    "handle2",
    "edit",
    "adjustAttentionButton",
    "adjustAttention",
    "sourceItemDescription"
  ],
  sourceItemContainer: [
    "sourceItemContainer",
    "sourceItemAttentionLevel",
    "sourceItemAddCircle",
    "sourceItem",
    "sourceItemInner",
    "attentionSelection",
    "sourceItemTexts",
    "title",
    "title2",
    "handle",
    "handle2",
    "edit",
    "adjustAttentionButton",
    "adjustAttention",
    "sourceItemDescription"
  ],
  sourceItemAttentionLevel: ["sourceItemAttentionLevel", "sourceItemAddCircle"],
  sourceItemAddCircle: ["sourceItemAddCircle"],
  sourceItem: [
    "sourceItem",
    "sourceItemInner",
    "attentionSelection",
    "sourceItemTexts",
    "title",
    "title2",
    "handle",
    "handle2",
    "edit",
    "adjustAttentionButton",
    "adjustAttention",
    "sourceItemDescription"
  ],
  sourceItemInner: [
    "sourceItemInner",
    "attentionSelection",
    "sourceItemTexts",
    "title",
    "title2",
    "handle",
    "handle2",
    "edit",
    "adjustAttentionButton",
    "adjustAttention"
  ],
  attentionSelection: ["attentionSelection"],
  sourceItemTexts: ["sourceItemTexts", "title", "title2", "handle", "handle2"],
  title: ["title", "title2"],
  title2: ["title2"],
  handle: ["handle", "handle2"],
  handle2: ["handle2"],
  edit: ["edit", "adjustAttentionButton", "adjustAttention"],
  adjustAttentionButton: ["adjustAttentionButton", "adjustAttention"],
  adjustAttention: ["adjustAttention"],
  sourceItemDescription: ["sourceItemDescription"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sourceItemContainer: "div";
  sourceItemAttentionLevel: "div";
  sourceItemAddCircle: "img";
  sourceItem: "div";
  sourceItemInner: "div";
  attentionSelection: typeof AttentionSelection;
  sourceItemTexts: "div";
  title: "div";
  title2: "div";
  handle: "div";
  handle2: "div";
  edit: "div";
  adjustAttentionButton: "div";
  adjustAttention: "div";
  sourceItemDescription: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSourceItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSourceItem__VariantsArgs;
    args?: PlasmicSourceItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSourceItem__Fetches;
  } & Omit<PlasmicSourceItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSourceItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSourceItem__ArgProps,
      internalVariantPropNames: PlasmicSourceItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSourceItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSourceItem";
  } else {
    func.displayName = `PlasmicSourceItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSourceItem = Object.assign(
  // Top-level PlasmicSourceItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sourceItemContainer: makeNodeComponent("sourceItemContainer"),
    sourceItemAttentionLevel: makeNodeComponent("sourceItemAttentionLevel"),
    sourceItemAddCircle: makeNodeComponent("sourceItemAddCircle"),
    sourceItem: makeNodeComponent("sourceItem"),
    sourceItemInner: makeNodeComponent("sourceItemInner"),
    attentionSelection: makeNodeComponent("attentionSelection"),
    sourceItemTexts: makeNodeComponent("sourceItemTexts"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    handle: makeNodeComponent("handle"),
    handle2: makeNodeComponent("handle2"),
    edit: makeNodeComponent("edit"),
    adjustAttentionButton: makeNodeComponent("adjustAttentionButton"),
    adjustAttention: makeNodeComponent("adjustAttention"),
    sourceItemDescription: makeNodeComponent("sourceItemDescription"),

    // Metadata about props expected for PlasmicSourceItem
    internalVariantProps: PlasmicSourceItem__VariantProps,
    internalArgProps: PlasmicSourceItem__ArgProps
  }
);

export default PlasmicSourceItem;
/* prettier-ignore-end */
