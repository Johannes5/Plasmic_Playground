// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: CnJaIprrDx
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicTwitterItem.module.css"; // plasmic-import: CnJaIprrDx/css

import _27IconheartFillIcon from "./icons/PlasmicIcon___27IconheartFill"; // plasmic-import: kGUtMm7VKf/icon
import _27IconrepeatIcon from "./icons/PlasmicIcon___27Iconrepeat"; // plasmic-import: DXysMN739Bs/icon
import ellipse194CJGmn4LUd from "./images/ellipse194.svg"; // plasmic-import: cJ_gmn4LUd/picture

export type PlasmicTwitterItem__VariantMembers = {};

export type PlasmicTwitterItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicTwitterItem__VariantsArgs;
export const PlasmicTwitterItem__VariantProps = new Array<VariantPropType>();

export type PlasmicTwitterItem__ArgsType = {};
type ArgPropType = keyof PlasmicTwitterItem__ArgsType;
export const PlasmicTwitterItem__ArgProps = new Array<ArgPropType>();

export type PlasmicTwitterItem__OverridesType = {
  root?: p.Flex<"div">;
  contentTwitterPost2?: p.Flex<"div">;
  twitterPostUser?: p.Flex<"div">;
  frame229?: p.Flex<"div">;
  img?: p.Flex<"img">;
  frame228?: p.Flex<"div">;
  twitterPostMetaData?: p.Flex<"div">;
  frame216?: p.Flex<"div">;
  group299?: p.Flex<"div">;
  _17K?: p.Flex<"div">;
  group300?: p.Flex<"div">;
  _372?: p.Flex<"div">;
  frame215?: p.Flex<"div">;
  mar14?: p.Flex<"div">;
  _800Pm?: p.Flex<"div">;
};

export interface DefaultTwitterItemProps {
  className?: string;
}

function PlasmicTwitterItem__RenderFunc(props: {
  variants: PlasmicTwitterItem__VariantsArgs;
  args: PlasmicTwitterItem__ArgsType;
  overrides: PlasmicTwitterItem__OverridesType;
  dataFetches?: PlasmicTwitterItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"contentTwitterPost2"}
        data-plasmic-override={overrides.contentTwitterPost2}
        hasGap={true}
        className={classNames(defaultcss.all, sty.contentTwitterPost2)}
      >
        <div
          data-plasmic-name={"twitterPostUser"}
          data-plasmic-override={overrides.twitterPostUser}
          className={classNames(defaultcss.all, sty.twitterPostUser)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame229"}
            data-plasmic-override={overrides.frame229}
            hasGap={true}
            className={classNames(defaultcss.all, sty.frame229)}
          >
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={ellipse194CJGmn4LUd}
            />

            <div
              data-plasmic-name={"frame228"}
              data-plasmic-override={overrides.frame228}
              className={classNames(defaultcss.all, sty.frame228)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__cNxu8
                )}
              >
                {"@NavalBot"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___444YW
                )}
              >
                {"Naval Ravikant Bot"}
              </div>
            </div>
          </p.Stack>
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__hgTjc
          )}
        >
          {
            "Your goal in life is to find out the people who need you the most, to find out the business that needs you the most, to find the project and the art that needs you the most. There is something out there just for you.‚Äù"
          }
        </div>

        <div
          data-plasmic-name={"twitterPostMetaData"}
          data-plasmic-override={overrides.twitterPostMetaData}
          className={classNames(defaultcss.all, sty.twitterPostMetaData)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame216"}
            data-plasmic-override={overrides.frame216}
            hasGap={true}
            className={classNames(defaultcss.all, sty.frame216)}
          >
            <div
              data-plasmic-name={"group299"}
              data-plasmic-override={overrides.group299}
              className={classNames(defaultcss.all, sty.group299)}
            >
              <div
                data-plasmic-name={"_17K"}
                data-plasmic-override={overrides._17K}
                className={classNames(defaultcss.all, sty._17K)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__apPy
                  )}
                >
                  {"1.7k"}
                </div>
              </div>

              <_27IconheartFillIcon
                className={classNames(defaultcss.all, sty.svg__ywzgd)}
                role={"img"}
              />
            </div>

            <div
              data-plasmic-name={"group300"}
              data-plasmic-override={overrides.group300}
              className={classNames(defaultcss.all, sty.group300)}
            >
              <div
                data-plasmic-name={"_372"}
                data-plasmic-override={overrides._372}
                className={classNames(defaultcss.all, sty._372)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__vJij8
                  )}
                >
                  {"372"}
                </div>
              </div>

              <_27IconrepeatIcon
                className={classNames(defaultcss.all, sty.svg__rpWQd)}
                role={"img"}
              />
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame215"}
            data-plasmic-override={overrides.frame215}
            hasGap={true}
            className={classNames(defaultcss.all, sty.frame215)}
          >
            <div
              data-plasmic-name={"mar14"}
              data-plasmic-override={overrides.mar14}
              className={classNames(defaultcss.all, sty.mar14)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__ymndW
                )}
              >
                {"Mar 14"}
              </div>
            </div>

            <div
              data-plasmic-name={"_800Pm"}
              data-plasmic-override={overrides._800Pm}
              className={classNames(defaultcss.all, sty._800Pm)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__svnR
                )}
              >
                {"8:00 PM"}
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "contentTwitterPost2",
    "twitterPostUser",
    "frame229",
    "img",
    "frame228",
    "twitterPostMetaData",
    "frame216",
    "group299",
    "_17K",
    "group300",
    "_372",
    "frame215",
    "mar14",
    "_800Pm"
  ],
  contentTwitterPost2: [
    "contentTwitterPost2",
    "twitterPostUser",
    "frame229",
    "img",
    "frame228",
    "twitterPostMetaData",
    "frame216",
    "group299",
    "_17K",
    "group300",
    "_372",
    "frame215",
    "mar14",
    "_800Pm"
  ],
  twitterPostUser: ["twitterPostUser", "frame229", "img", "frame228"],
  frame229: ["frame229", "img", "frame228"],
  img: ["img"],
  frame228: ["frame228"],
  twitterPostMetaData: [
    "twitterPostMetaData",
    "frame216",
    "group299",
    "_17K",
    "group300",
    "_372",
    "frame215",
    "mar14",
    "_800Pm"
  ],
  frame216: ["frame216", "group299", "_17K", "group300", "_372"],
  group299: ["group299", "_17K"],
  _17K: ["_17K"],
  group300: ["group300", "_372"],
  _372: ["_372"],
  frame215: ["frame215", "mar14", "_800Pm"],
  mar14: ["mar14"],
  _800Pm: ["_800Pm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentTwitterPost2: "div";
  twitterPostUser: "div";
  frame229: "div";
  img: "img";
  frame228: "div";
  twitterPostMetaData: "div";
  frame216: "div";
  group299: "div";
  _17K: "div";
  group300: "div";
  _372: "div";
  frame215: "div";
  mar14: "div";
  _800Pm: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTwitterItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTwitterItem__VariantsArgs;
    args?: PlasmicTwitterItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTwitterItem__Fetches;
  } & Omit<PlasmicTwitterItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTwitterItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTwitterItem__ArgProps,
      internalVariantPropNames: PlasmicTwitterItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTwitterItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTwitterItem";
  } else {
    func.displayName = `PlasmicTwitterItem.${nodeName}`;
  }
  return func;
}

export const PlasmicTwitterItem = Object.assign(
  // Top-level PlasmicTwitterItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentTwitterPost2: makeNodeComponent("contentTwitterPost2"),
    twitterPostUser: makeNodeComponent("twitterPostUser"),
    frame229: makeNodeComponent("frame229"),
    img: makeNodeComponent("img"),
    frame228: makeNodeComponent("frame228"),
    twitterPostMetaData: makeNodeComponent("twitterPostMetaData"),
    frame216: makeNodeComponent("frame216"),
    group299: makeNodeComponent("group299"),
    _17K: makeNodeComponent("_17K"),
    group300: makeNodeComponent("group300"),
    _372: makeNodeComponent("_372"),
    frame215: makeNodeComponent("frame215"),
    mar14: makeNodeComponent("mar14"),
    _800Pm: makeNodeComponent("_800Pm"),

    // Metadata about props expected for PlasmicTwitterItem
    internalVariantProps: PlasmicTwitterItem__VariantProps,
    internalArgProps: PlasmicTwitterItem__ArgProps
  }
);

export default PlasmicTwitterItem;
/* prettier-ignore-end */
