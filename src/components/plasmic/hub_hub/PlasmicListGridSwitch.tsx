// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: n9Vx5RIblr
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicListGridSwitch.module.css"; // plasmic-import: n9Vx5RIblr/css

import GridIconIcon from "./icons/PlasmicIcon__GridIcon"; // plasmic-import: uVPEv1nowe/icon
import SwitchCircleIcon from "./icons/PlasmicIcon__SwitchCircle"; // plasmic-import: CSqPY41OZb/icon
import ListIconIcon from "./icons/PlasmicIcon__ListIcon"; // plasmic-import: EKiMsBjxHC/icon

export type PlasmicListGridSwitch__VariantMembers = {
  listGrid: "grid" | "list";
};

export type PlasmicListGridSwitch__VariantsArgs = {
  listGrid?: MultiChoiceArg<"grid" | "list">;
};

type VariantPropType = keyof PlasmicListGridSwitch__VariantsArgs;
export const PlasmicListGridSwitch__VariantProps = new Array<VariantPropType>(
  "listGrid"
);

export type PlasmicListGridSwitch__ArgsType = {};
type ArgPropType = keyof PlasmicListGridSwitch__ArgsType;
export const PlasmicListGridSwitch__ArgProps = new Array<ArgPropType>();

export type PlasmicListGridSwitch__OverridesType = {
  root?: p.Flex<"div">;
  outerContainer?: p.Flex<"div">;
  innerContainer?: p.Flex<"div">;
  switchCircle?: p.Flex<"div">;
  property1ViewSwitchProperty2List?: p.Flex<"div">;
  outerContainer2?: p.Flex<"div">;
  innerContainer2?: p.Flex<"div">;
};

export interface DefaultListGridSwitchProps {
  listGrid?: MultiChoiceArg<"grid" | "list">;
  className?: string;
}

function PlasmicListGridSwitch__RenderFunc(props: {
  variants: PlasmicListGridSwitch__VariantsArgs;
  args: PlasmicListGridSwitch__ArgsType;
  overrides: PlasmicListGridSwitch__OverridesType;
  dataFetches?: PlasmicListGridSwitch__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    (
      hasVariant(variants, "listGrid", "list")
        ? true
        : hasVariant(variants, "listGrid", "grid")
        ? true
        : false
    ) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root__listGrid_grid]: hasVariant(variants, "listGrid", "grid"),
          [sty.root__listGrid_list]: hasVariant(variants, "listGrid", "list")
        })}
      >
        {(hasVariant(variants, "listGrid", "list") ? false : true) ? (
          <div
            data-plasmic-name={"outerContainer"}
            data-plasmic-override={overrides.outerContainer}
            className={classNames(defaultcss.all, sty.outerContainer, {
              [sty.outerContainer__listGrid_list]: hasVariant(
                variants,
                "listGrid",
                "list"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "listGrid", "list") ? false : true) ? (
          <div
            data-plasmic-name={"innerContainer"}
            data-plasmic-override={overrides.innerContainer}
            className={classNames(defaultcss.all, sty.innerContainer, {
              [sty.innerContainer__listGrid_grid]: hasVariant(
                variants,
                "listGrid",
                "grid"
              ),
              [sty.innerContainer__listGrid_list]: hasVariant(
                variants,
                "listGrid",
                "list"
              )
            })}
          >
            {(
              hasVariant(variants, "listGrid", "list")
                ? false
                : hasVariant(variants, "listGrid", "grid")
                ? true
                : false
            ) ? (
              <GridIconIcon
                className={classNames(defaultcss.all, sty.svg__pym2N, {
                  [sty.svg__listGrid_grid__pym2NOhCgb]: hasVariant(
                    variants,
                    "listGrid",
                    "grid"
                  ),
                  [sty.svg__listGrid_list__pym2NquvOf]: hasVariant(
                    variants,
                    "listGrid",
                    "list"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
        {(hasVariant(variants, "listGrid", "list") ? false : true) ? (
          <div
            data-plasmic-name={"switchCircle"}
            data-plasmic-override={overrides.switchCircle}
            className={classNames(defaultcss.all, sty.switchCircle, {
              [sty.switchCircle__listGrid_list]: hasVariant(
                variants,
                "listGrid",
                "list"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "listGrid", "list") ? true : false) ? (
          <div
            data-plasmic-name={"property1ViewSwitchProperty2List"}
            data-plasmic-override={overrides.property1ViewSwitchProperty2List}
            className={classNames(
              defaultcss.all,
              sty.property1ViewSwitchProperty2List,
              {
                [sty.property1ViewSwitchProperty2List__listGrid_list]:
                  hasVariant(variants, "listGrid", "list")
              }
            )}
          >
            <div
              data-plasmic-name={"outerContainer2"}
              data-plasmic-override={overrides.outerContainer2}
              className={classNames(defaultcss.all, sty.outerContainer2, {
                [sty.outerContainer2__listGrid_list]: hasVariant(
                  variants,
                  "listGrid",
                  "list"
                )
              })}
            />

            <div
              data-plasmic-name={"innerContainer2"}
              data-plasmic-override={overrides.innerContainer2}
              className={classNames(defaultcss.all, sty.innerContainer2)}
            />

            {(hasVariant(variants, "listGrid", "list") ? true : false) ? (
              <SwitchCircleIcon
                className={classNames(defaultcss.all, sty.svg__o0AAg, {
                  [sty.svg__listGrid_list__o0AAGquvOf]: hasVariant(
                    variants,
                    "listGrid",
                    "list"
                  )
                })}
                role={"img"}
              />
            ) : null}
            {(hasVariant(variants, "listGrid", "list") ? true : false) ? (
              <ListIconIcon
                className={classNames(defaultcss.all, sty.svg___3RlNe, {
                  [sty.svg__listGrid_list___3RlNequvOf]: hasVariant(
                    variants,
                    "listGrid",
                    "list"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "outerContainer",
    "innerContainer",
    "switchCircle",
    "property1ViewSwitchProperty2List",
    "outerContainer2",
    "innerContainer2"
  ],
  outerContainer: ["outerContainer"],
  innerContainer: ["innerContainer"],
  switchCircle: ["switchCircle"],
  property1ViewSwitchProperty2List: [
    "property1ViewSwitchProperty2List",
    "outerContainer2",
    "innerContainer2"
  ],
  outerContainer2: ["outerContainer2"],
  innerContainer2: ["innerContainer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  outerContainer: "div";
  innerContainer: "div";
  switchCircle: "div";
  property1ViewSwitchProperty2List: "div";
  outerContainer2: "div";
  innerContainer2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListGridSwitch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListGridSwitch__VariantsArgs;
    args?: PlasmicListGridSwitch__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicListGridSwitch__Fetches;
  } & Omit<PlasmicListGridSwitch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicListGridSwitch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicListGridSwitch__ArgProps,
      internalVariantPropNames: PlasmicListGridSwitch__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicListGridSwitch__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListGridSwitch";
  } else {
    func.displayName = `PlasmicListGridSwitch.${nodeName}`;
  }
  return func;
}

export const PlasmicListGridSwitch = Object.assign(
  // Top-level PlasmicListGridSwitch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    outerContainer: makeNodeComponent("outerContainer"),
    innerContainer: makeNodeComponent("innerContainer"),
    switchCircle: makeNodeComponent("switchCircle"),
    property1ViewSwitchProperty2List: makeNodeComponent(
      "property1ViewSwitchProperty2List"
    ),
    outerContainer2: makeNodeComponent("outerContainer2"),
    innerContainer2: makeNodeComponent("innerContainer2"),

    // Metadata about props expected for PlasmicListGridSwitch
    internalVariantProps: PlasmicListGridSwitch__VariantProps,
    internalArgProps: PlasmicListGridSwitch__ArgProps
  }
);

export default PlasmicListGridSwitch;
/* prettier-ignore-end */
