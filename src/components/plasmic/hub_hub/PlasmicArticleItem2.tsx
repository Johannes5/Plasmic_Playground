// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: jThNvO6SKd_
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicArticleItem2.module.css"; // plasmic-import: jThNvO6SKd_/css

import DeviderIcon from "./icons/PlasmicIcon__Devider"; // plasmic-import: p54zAGje4d/icon
import titleImage3Js0HjW73O from "./images/titleImage3.jpeg"; // plasmic-import: JS0HjW73O/picture

export type PlasmicArticleItem2__VariantMembers = {
  composition: "full" | "hideImage" | "hideSnippet" | "titleOnly";
};

export type PlasmicArticleItem2__VariantsArgs = {
  composition?: MultiChoiceArg<
    "full" | "hideImage" | "hideSnippet" | "titleOnly"
  >;
};

type VariantPropType = keyof PlasmicArticleItem2__VariantsArgs;
export const PlasmicArticleItem2__VariantProps = new Array<VariantPropType>(
  "composition"
);

export type PlasmicArticleItem2__ArgsType = {
  title?: React.ReactNode;
  snippet?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
};

type ArgPropType = keyof PlasmicArticleItem2__ArgsType;
export const PlasmicArticleItem2__ArgProps = new Array<ArgPropType>(
  "title",
  "snippet",
  "source",
  "readingTime",
  "date"
);

export type PlasmicArticleItem2__OverridesType = {
  root?: p.Flex<"div">;
  articleContent?: p.Flex<"div">;
  titleImage?: p.Flex<"div">;
  image?: p.Flex<"img">;
  metadata?: p.Flex<"div">;
  box?: p.Flex<"div">;
  box2?: p.Flex<"div">;
  box3?: p.Flex<"div">;
  box4?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultArticleItem2Props {
  title?: React.ReactNode;
  snippet?: React.ReactNode;
  source?: React.ReactNode;
  readingTime?: React.ReactNode;
  date?: React.ReactNode;
  composition?: MultiChoiceArg<
    "full" | "hideImage" | "hideSnippet" | "titleOnly"
  >;
  className?: string;
}

function PlasmicArticleItem2__RenderFunc(props: {
  variants: PlasmicArticleItem2__VariantsArgs;
  args: PlasmicArticleItem2__ArgsType;
  overrides: PlasmicArticleItem2__OverridesType;
  dataFetches?: PlasmicArticleItem2__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"articleContent"}
        data-plasmic-override={overrides.articleContent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.articleContent, {
          [sty.articleContent__composition_hideImage]: hasVariant(
            variants,
            "composition",
            "hideImage"
          ),
          [sty.articleContent__composition_hideSnippet]: hasVariant(
            variants,
            "composition",
            "hideSnippet"
          ),
          [sty.articleContent__composition_titleOnly]: hasVariant(
            variants,
            "composition",
            "titleOnly"
          ),
          [sty.articleContent__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        {(
          hasVariant(variants, "composition", "titleOnly")
            ? false
            : hasVariant(variants, "composition", "hideImage")
            ? false
            : true
        ) ? (
          <div
            data-plasmic-name={"titleImage"}
            data-plasmic-override={overrides.titleImage}
            className={classNames(defaultcss.all, sty.titleImage, {
              [sty.titleImage__composition_hideImage]: hasVariant(
                variants,
                "composition",
                "hideImage"
              ),
              [sty.titleImage__composition_hideSnippet]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.titleImage__composition_titleOnly]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.titleImage__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <img
              data-plasmic-name={"image"}
              data-plasmic-override={overrides.image}
              alt={""}
              className={classNames(defaultcss.img, sty.image, {
                [sty.image__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
              role={"img"}
              src={titleImage3Js0HjW73O}
            />
          </div>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.freeBox__nzGmN, {
            [sty.freeBox__composition_hideSnippet__nzGmNcha6I]: hasVariant(
              variants,
              "composition",
              "hideSnippet"
            ),
            [sty.freeBox__composition_titleOnly__nzGmNyp53D]: hasVariant(
              variants,
              "composition",
              "titleOnly"
            ),
            [sty.freeBox__global_theme_dark__nzGmNoIz4X]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "The MacBook Pro, iPad mini, and more are discounted at ",
            value: args.title,
            className: classNames(sty.slotTitle, {
              [sty.slotTitle__composition_hideSnippet]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.slotTitle__composition_titleOnly]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.slotTitle__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })
          })}
        </div>

        {(
          hasVariant(variants, "composition", "titleOnly")
            ? false
            : hasVariant(variants, "composition", "hideSnippet")
            ? false
            : true
        ) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__pBc0M, {
              [sty.freeBox__composition_hideSnippet__pBc0MCha6I]: hasVariant(
                variants,
                "composition",
                "hideSnippet"
              ),
              [sty.freeBox__composition_titleOnly__pBc0Myp53D]: hasVariant(
                variants,
                "composition",
                "titleOnly"
              ),
              [sty.freeBox__global_theme_dark__pBc0MOIz4X]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Your goal in life is to find out the people who need you the most, to finda out the business that needs you the most, to find the project and the art that needs you the most. There is something out there just for you...",
              value: args.snippet,
              className: classNames(sty.slotSnippet, {
                [sty.slotSnippet__composition_hideSnippet]: hasVariant(
                  variants,
                  "composition",
                  "hideSnippet"
                ),
                [sty.slotSnippet__composition_titleOnly]: hasVariant(
                  variants,
                  "composition",
                  "titleOnly"
                ),
                [sty.slotSnippet__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })
            })}
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"metadata"}
          data-plasmic-override={overrides.metadata}
          hasGap={true}
          className={classNames(defaultcss.all, sty.metadata, {
            [sty.metadata__composition_hideSnippet]: hasVariant(
              variants,
              "composition",
              "hideSnippet"
            ),
            [sty.metadata__composition_titleOnly]: hasVariant(
              variants,
              "composition",
              "titleOnly"
            ),
            [sty.metadata__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <div
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            className={classNames(defaultcss.all, sty.box)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "The Verge",
              value: args.source,
              className: classNames(sty.slotSource, {
                [sty.slotSource__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"box2"}
            data-plasmic-override={overrides.box2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box2)}
          >
            <div
              data-plasmic-name={"box3"}
              data-plasmic-override={overrides.box3}
              className={classNames(defaultcss.all, sty.box3)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "2 min read",
                value: args.readingTime,
                className: classNames(sty.slotReadingTime, {
                  [sty.slotReadingTime__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })}
            </div>

            <div
              data-plasmic-name={"box4"}
              data-plasmic-override={overrides.box4}
              className={classNames(defaultcss.all, sty.box4)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "1 months ago",
                value: args.date,
                className: classNames(sty.slotDate, {
                  [sty.slotDate__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })
              })}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      {false ? (
        <div className={classNames(defaultcss.all, sty.freeBox__gMxbf)}>
          {true ? (
            <DeviderIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleContent",
    "titleImage",
    "image",
    "metadata",
    "box",
    "box2",
    "box3",
    "box4",
    "svg"
  ],
  articleContent: [
    "articleContent",
    "titleImage",
    "image",
    "metadata",
    "box",
    "box2",
    "box3",
    "box4"
  ],
  titleImage: ["titleImage", "image"],
  image: ["image"],
  metadata: ["metadata", "box", "box2", "box3", "box4"],
  box: ["box"],
  box2: ["box2", "box3", "box4"],
  box3: ["box3"],
  box4: ["box4"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleContent: "div";
  titleImage: "div";
  image: "img";
  metadata: "div";
  box: "div";
  box2: "div";
  box3: "div";
  box4: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleItem2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleItem2__VariantsArgs;
    args?: PlasmicArticleItem2__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArticleItem2__Fetches;
  } & Omit<PlasmicArticleItem2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArticleItem2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleItem2__ArgProps,
      internalVariantPropNames: PlasmicArticleItem2__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArticleItem2__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleItem2";
  } else {
    func.displayName = `PlasmicArticleItem2.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleItem2 = Object.assign(
  // Top-level PlasmicArticleItem2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleContent: makeNodeComponent("articleContent"),
    titleImage: makeNodeComponent("titleImage"),
    image: makeNodeComponent("image"),
    metadata: makeNodeComponent("metadata"),
    box: makeNodeComponent("box"),
    box2: makeNodeComponent("box2"),
    box3: makeNodeComponent("box3"),
    box4: makeNodeComponent("box4"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicArticleItem2
    internalVariantProps: PlasmicArticleItem2__VariantProps,
    internalArgProps: PlasmicArticleItem2__ArgProps
  }
);

export default PlasmicArticleItem2;
/* prettier-ignore-end */
