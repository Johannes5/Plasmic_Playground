// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: xmtlGTX1K1
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import QuestItem from "../../QuestItem"; // plasmic-import: 4vRjyz8vv6/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicQuestlog.module.css"; // plasmic-import: xmtlGTX1K1/css

export type PlasmicQuestlog__VariantMembers = {
  hidden: "hidden";
};

export type PlasmicQuestlog__VariantsArgs = {
  hidden?: SingleBooleanChoiceArg<"hidden">;
};

type VariantPropType = keyof PlasmicQuestlog__VariantsArgs;
export const PlasmicQuestlog__VariantProps = new Array<VariantPropType>(
  "hidden"
);

export type PlasmicQuestlog__ArgsType = {};
type ArgPropType = keyof PlasmicQuestlog__ArgsType;
export const PlasmicQuestlog__ArgProps = new Array<ArgPropType>();

export type PlasmicQuestlog__OverridesType = {
  root?: p.Flex<"div">;
  questlogContainer?: p.Flex<"div">;
  hideChecklist?: p.Flex<"div">;
};

export interface DefaultQuestlogProps {
  hidden?: SingleBooleanChoiceArg<"hidden">;
  className?: string;
}

function PlasmicQuestlog__RenderFunc(props: {
  variants: PlasmicQuestlog__VariantsArgs;
  args: PlasmicQuestlog__ArgsType;
  overrides: PlasmicQuestlog__OverridesType;
  dataFetches?: PlasmicQuestlog__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "hidden", "hidden") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__ozTx6,
            {
              [sty.freeBox__hidden__ozTx6Qp7I8]: hasVariant(
                variants,
                "hidden",
                "hidden"
              )
            }
          )}
        >
          {hasVariant(variants, "hidden", "hidden")
            ? "show Checklist"
            : "hide Checklist"}
        </div>
      ) : null}
      {(hasVariant(variants, "hidden", "hidden") ? false : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"questlogContainer"}
          data-plasmic-override={overrides.questlogContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.questlogContainer, {
            [sty.questlogContainer__hidden]: hasVariant(
              variants,
              "hidden",
              "hidden"
            )
          })}
        >
          <QuestItem
            className={classNames("__wab_instance", sty.questItem__ren)}
            done={"done" as const}
            text={"Quick Tour"}
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem__obD0)}
            text={
              <span className={"plasmic_default__all plasmic_default__span"}>
                <React.Fragment>{"create a new "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"Section"}
                </span>
              </span>
            }
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem___5Gdgg)}
            hideButton={"hideButton" as const}
            text={
              <span className={"plasmic_default__all plasmic_default__span"}>
                <React.Fragment>{"open "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"SeeAll"}
                </span>
                <React.Fragment>{" on a "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"Section"}
                </span>
              </span>
            }
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem__koZxn)}
            text={
              <span className={"plasmic_default__all plasmic_default__span"}>
                <React.Fragment>{"create a new "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"Hub"}
                </span>
              </span>
            }
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem__xivwn)}
            hideButton={"hideButton" as const}
            text={
              <span className={"plasmic_default__all plasmic_default__span"}>
                <React.Fragment>{"use"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {" Save for Later"}
                </span>
              </span>
            }
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem__vsBxM)}
            text={"learn Touch Gestures"}
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem__zt1Gi)}
            text={"learn Keyboard Shortcuts"}
          />

          <QuestItem
            className={classNames("__wab_instance", sty.questItem___1LLtl)}
            text={
              <span className={"plasmic_default__all plasmic_default__span"}>
                <React.Fragment>{"create an "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"Account"}
                </span>
              </span>
            }
          />

          <div
            data-plasmic-name={"hideChecklist"}
            data-plasmic-override={overrides.hideChecklist}
            className={classNames(defaultcss.all, sty.hideChecklist)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__vLlhA,
                {
                  [sty.freeBox__hidden__vLlhAqp7I8]: hasVariant(
                    variants,
                    "hidden",
                    "hidden"
                  )
                }
              )}
            >
              {"hide Checklist"}
            </div>
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "questlogContainer", "hideChecklist"],
  questlogContainer: ["questlogContainer", "hideChecklist"],
  hideChecklist: ["hideChecklist"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  questlogContainer: "div";
  hideChecklist: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestlog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestlog__VariantsArgs;
    args?: PlasmicQuestlog__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicQuestlog__Fetches;
  } & Omit<PlasmicQuestlog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuestlog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicQuestlog__ArgProps,
      internalVariantPropNames: PlasmicQuestlog__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicQuestlog__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestlog";
  } else {
    func.displayName = `PlasmicQuestlog.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestlog = Object.assign(
  // Top-level PlasmicQuestlog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    questlogContainer: makeNodeComponent("questlogContainer"),
    hideChecklist: makeNodeComponent("hideChecklist"),

    // Metadata about props expected for PlasmicQuestlog
    internalVariantProps: PlasmicQuestlog__VariantProps,
    internalArgProps: PlasmicQuestlog__ArgProps
  }
);

export default PlasmicQuestlog;
/* prettier-ignore-end */
