// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: mkq6PHJJELM
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Arrows from "../../Arrows"; // plasmic-import: W9XdlIeiuX/component
import SectionHeader from "../../SectionHeader"; // plasmic-import: Isc1ACYDLI/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSection.module.css"; // plasmic-import: mkq6PHJJELM/css

import IconsSourcesYoutubeIcon from "./icons/PlasmicIcon__IconsSourcesYoutube"; // plasmic-import: 9FfsM2N0XvJ/icon

export type PlasmicSection__VariantMembers = {};

export type PlasmicSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection__VariantsArgs;
export const PlasmicSection__VariantProps = new Array<VariantPropType>();

export type PlasmicSection__ArgsType = {
  sectionContent?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSection__ArgsType;
export const PlasmicSection__ArgProps = new Array<ArgPropType>(
  "sectionContent"
);

export type PlasmicSection__OverridesType = {
  root?: p.Flex<"div">;
  arrows?: p.Flex<typeof Arrows>;
  freeBox?: p.Flex<"div">;
  sectionHeader?: p.Flex<typeof SectionHeader>;
  sectionContentContainer?: p.Flex<"div">;
};

export interface DefaultSectionProps {
  sectionContent?: React.ReactNode;
  className?: string;
}

function PlasmicSection__RenderFunc(props: {
  variants: PlasmicSection__VariantsArgs;
  args: PlasmicSection__ArgsType;
  overrides: PlasmicSection__OverridesType;
  dataFetches?: PlasmicSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Arrows
        data-plasmic-name={"arrows"}
        data-plasmic-override={overrides.arrows}
        className={classNames("__wab_instance", sty.arrows)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <SectionHeader
          data-plasmic-name={"sectionHeader"}
          data-plasmic-override={overrides.sectionHeader}
          className={classNames("__wab_instance", sty.sectionHeader)}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"sectionContentContainer"}
          data-plasmic-override={overrides.sectionContentContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sectionContentContainer)}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.sectionContent
          })}
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "arrows",
    "freeBox",
    "sectionHeader",
    "sectionContentContainer"
  ],
  arrows: ["arrows"],
  freeBox: ["freeBox", "sectionHeader", "sectionContentContainer"],
  sectionHeader: ["sectionHeader"],
  sectionContentContainer: ["sectionContentContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  arrows: typeof Arrows;
  freeBox: "div";
  sectionHeader: typeof SectionHeader;
  sectionContentContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection__VariantsArgs;
    args?: PlasmicSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSection__Fetches;
  } & Omit<PlasmicSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection__ArgProps,
      internalVariantPropNames: PlasmicSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSection";
  } else {
    func.displayName = `PlasmicSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSection = Object.assign(
  // Top-level PlasmicSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    arrows: makeNodeComponent("arrows"),
    freeBox: makeNodeComponent("freeBox"),
    sectionHeader: makeNodeComponent("sectionHeader"),
    sectionContentContainer: makeNodeComponent("sectionContentContainer"),

    // Metadata about props expected for PlasmicSection
    internalVariantProps: PlasmicSection__VariantProps,
    internalArgProps: PlasmicSection__ArgProps
  }
);

export default PlasmicSection;
/* prettier-ignore-end */
