// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: fZOEbMmQUL
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicAddButton.module.css"; // plasmic-import: fZOEbMmQUL/css

import Add24FilledIcon from "./icons/PlasmicIcon__Add24Filled"; // plasmic-import: W5RSWrKI-W/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: -gNKA8h-Z4/icon
import AddCirclesvgIcon from "./icons/PlasmicIcon__AddCirclesvg"; // plasmic-import: rhXT7zeyx/icon

export type PlasmicAddButton__VariantMembers = {
  unnamedGroupOfVariants: "_default" | "selected" | "small" | "smaller";
};

export type PlasmicAddButton__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<
    "_default" | "selected" | "small" | "smaller"
  >;
};

type VariantPropType = keyof PlasmicAddButton__VariantsArgs;
export const PlasmicAddButton__VariantProps = new Array<VariantPropType>(
  "unnamedGroupOfVariants"
);

export type PlasmicAddButton__ArgsType = {};
type ArgPropType = keyof PlasmicAddButton__ArgsType;
export const PlasmicAddButton__ArgProps = new Array<ArgPropType>();

export type PlasmicAddButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultAddButtonProps {
  unnamedGroupOfVariants?: SingleChoiceArg<
    "_default" | "selected" | "small" | "smaller"
  >;
  className?: string;
}

function PlasmicAddButton__RenderFunc(props: {
  variants: PlasmicAddButton__VariantsArgs;
  args: PlasmicAddButton__ArgsType;
  overrides: PlasmicAddButton__OverridesType;
  dataFetches?: PlasmicAddButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__unnamedGroupOfVariants_selected]: hasVariant(
          variants,
          "unnamedGroupOfVariants",
          "selected"
        ),
        [sty.root__unnamedGroupOfVariants_small]: hasVariant(
          variants,
          "unnamedGroupOfVariants",
          "small"
        ),
        [sty.root__unnamedGroupOfVariants_smaller]: hasVariant(
          variants,
          "unnamedGroupOfVariants",
          "smaller"
        )
      })}
    >
      {(
        hasVariant(variants, "unnamedGroupOfVariants", "smaller")
          ? false
          : hasVariant(variants, "unnamedGroupOfVariants", "selected")
          ? false
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__xgYm5, {
            [sty.freeBox__unnamedGroupOfVariants_selected__xgYm5Fo3Ln]:
              hasVariant(variants, "unnamedGroupOfVariants", "selected"),
            [sty.freeBox__unnamedGroupOfVariants_small__xgYm5Vi0Q]: hasVariant(
              variants,
              "unnamedGroupOfVariants",
              "small"
            ),
            [sty.freeBox__unnamedGroupOfVariants_smaller__xgYm5PVwVk]:
              hasVariant(variants, "unnamedGroupOfVariants", "smaller")
          })}
          id={"sdfsd" as const}
        >
          {true ? (
            <Add24FilledIcon
              className={classNames(defaultcss.all, sty.svg__syIbI, {
                [sty.svg__unnamedGroupOfVariants_small__syIbIvi0Q]: hasVariant(
                  variants,
                  "unnamedGroupOfVariants",
                  "small"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "unnamedGroupOfVariants", "selected")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__bsIuc, {
            [sty.freeBox__unnamedGroupOfVariants_selected__bsIucFo3Ln]:
              hasVariant(variants, "unnamedGroupOfVariants", "selected")
          })}
        >
          {true ? (
            <VectorIcon
              className={classNames(defaultcss.all, sty.svg__tUHd)}
              role={"img"}
            />
          ) : null}
          {false ? (
            <Add24FilledIcon
              className={classNames(defaultcss.all, sty.svg__zGrxI)}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "unnamedGroupOfVariants", "smaller") ? true : false
      ) ? (
        <AddCirclesvgIcon
          className={classNames(defaultcss.all, sty.svg__aGHaH, {
            [sty.svg__unnamedGroupOfVariants_smaller__aGHaHpVwVk]: hasVariant(
              variants,
              "unnamedGroupOfVariants",
              "smaller"
            )
          })}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddButton__VariantsArgs;
    args?: PlasmicAddButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAddButton__Fetches;
  } & Omit<PlasmicAddButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAddButton__ArgProps,
      internalVariantPropNames: PlasmicAddButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAddButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddButton";
  } else {
    func.displayName = `PlasmicAddButton.${nodeName}`;
  }
  return func;
}

export const PlasmicAddButton = Object.assign(
  // Top-level PlasmicAddButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAddButton
    internalVariantProps: PlasmicAddButton__VariantProps,
    internalArgProps: PlasmicAddButton__ArgProps
  }
);

export default PlasmicAddButton;
/* prettier-ignore-end */
