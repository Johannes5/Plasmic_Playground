// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: 6rK5Xe1UAz
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicSectionModeIcon.module.css"; // plasmic-import: 6rK5Xe1UAz/css

export type PlasmicSectionModeIcon__VariantMembers = {
  selected: "selected";
};

export type PlasmicSectionModeIcon__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};

type VariantPropType = keyof PlasmicSectionModeIcon__VariantsArgs;
export const PlasmicSectionModeIcon__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicSectionModeIcon__ArgsType = {};
type ArgPropType = keyof PlasmicSectionModeIcon__ArgsType;
export const PlasmicSectionModeIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionModeIcon__OverridesType = {
  root?: p.Flex<"div">;
  iconSectionView?: p.Flex<"div">;
  group68?: p.Flex<"div">;
  rectangle25?: p.Flex<"div">;
  rectangle26?: p.Flex<"div">;
  group69?: p.Flex<"div">;
  rectangle27?: p.Flex<"div">;
  rectangle30?: p.Flex<"div">;
};

export interface DefaultSectionModeIconProps {
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

function PlasmicSectionModeIcon__RenderFunc(props: {
  variants: PlasmicSectionModeIcon__VariantsArgs;
  args: PlasmicSectionModeIcon__ArgsType;
  overrides: PlasmicSectionModeIcon__OverridesType;
  dataFetches?: PlasmicSectionModeIcon__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected]: hasVariant(variants, "selected", "selected")
      })}
    >
      <div
        data-plasmic-name={"iconSectionView"}
        data-plasmic-override={overrides.iconSectionView}
        className={classNames(defaultcss.all, sty.iconSectionView)}
      >
        <div
          data-plasmic-name={"group68"}
          data-plasmic-override={overrides.group68}
          className={classNames(defaultcss.all, sty.group68, {
            [sty.group68__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        >
          <div
            data-plasmic-name={"rectangle25"}
            data-plasmic-override={overrides.rectangle25}
            className={classNames(defaultcss.all, sty.rectangle25)}
          />

          <div
            data-plasmic-name={"rectangle26"}
            data-plasmic-override={overrides.rectangle26}
            className={classNames(defaultcss.all, sty.rectangle26)}
          />
        </div>

        <div
          data-plasmic-name={"group69"}
          data-plasmic-override={overrides.group69}
          className={classNames(defaultcss.all, sty.group69)}
        >
          <div
            data-plasmic-name={"rectangle27"}
            data-plasmic-override={overrides.rectangle27}
            className={classNames(defaultcss.all, sty.rectangle27)}
          />
        </div>
      </div>

      {(hasVariant(variants, "selected", "selected") ? true : false) ? (
        <div
          data-plasmic-name={"rectangle30"}
          data-plasmic-override={overrides.rectangle30}
          className={classNames(defaultcss.all, sty.rectangle30, {
            [sty.rectangle30__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iconSectionView",
    "group68",
    "rectangle25",
    "rectangle26",
    "group69",
    "rectangle27",
    "rectangle30"
  ],
  iconSectionView: [
    "iconSectionView",
    "group68",
    "rectangle25",
    "rectangle26",
    "group69",
    "rectangle27"
  ],
  group68: ["group68", "rectangle25", "rectangle26"],
  rectangle25: ["rectangle25"],
  rectangle26: ["rectangle26"],
  group69: ["group69", "rectangle27"],
  rectangle27: ["rectangle27"],
  rectangle30: ["rectangle30"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iconSectionView: "div";
  group68: "div";
  rectangle25: "div";
  rectangle26: "div";
  group69: "div";
  rectangle27: "div";
  rectangle30: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionModeIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionModeIcon__VariantsArgs;
    args?: PlasmicSectionModeIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionModeIcon__Fetches;
  } & Omit<PlasmicSectionModeIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionModeIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionModeIcon__ArgProps,
      internalVariantPropNames: PlasmicSectionModeIcon__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionModeIcon__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionModeIcon";
  } else {
    func.displayName = `PlasmicSectionModeIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionModeIcon = Object.assign(
  // Top-level PlasmicSectionModeIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconSectionView: makeNodeComponent("iconSectionView"),
    group68: makeNodeComponent("group68"),
    rectangle25: makeNodeComponent("rectangle25"),
    rectangle26: makeNodeComponent("rectangle26"),
    group69: makeNodeComponent("group69"),
    rectangle27: makeNodeComponent("rectangle27"),
    rectangle30: makeNodeComponent("rectangle30"),

    // Metadata about props expected for PlasmicSectionModeIcon
    internalVariantProps: PlasmicSectionModeIcon__VariantProps,
    internalArgProps: PlasmicSectionModeIcon__ArgProps
  }
);

export default PlasmicSectionModeIcon;
/* prettier-ignore-end */
