// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 24qDGfvb2rMn6oy8PVF95d
// Component: 1-oouZ2-GW
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 40N_XXvhaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_hub_hub.module.css"; // plasmic-import: 24qDGfvb2rMn6oy8PVF95d/projectcss
import * as sty from "./PlasmicOptionsIcon.module.css"; // plasmic-import: 1-oouZ2-GW/css

import iconsEditButton6VNhT0JV8KZ from "./images/iconsEditButton6.svg"; // plasmic-import: vNhT0jV8kZ/picture
import iconsEditButton628NaKaKq3Zz from "./images/iconsEditButton62.svg"; // plasmic-import: 8naKAKq3ZZ/picture

export type PlasmicOptionsIcon__VariantMembers = {
  variants2: "seeAllView" | "sectionView" | "seeAllViewRed";
};

export type PlasmicOptionsIcon__VariantsArgs = {
  variants2?: SingleChoiceArg<"seeAllView" | "sectionView" | "seeAllViewRed">;
};

type VariantPropType = keyof PlasmicOptionsIcon__VariantsArgs;
export const PlasmicOptionsIcon__VariantProps = new Array<VariantPropType>(
  "variants2"
);

export type PlasmicOptionsIcon__ArgsType = {};
type ArgPropType = keyof PlasmicOptionsIcon__ArgsType;
export const PlasmicOptionsIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicOptionsIcon__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOptionsIconProps {
  variants2?: SingleChoiceArg<"seeAllView" | "sectionView" | "seeAllViewRed">;
  className?: string;
}

function PlasmicOptionsIcon__RenderFunc(props: {
  variants: PlasmicOptionsIcon__VariantsArgs;
  args: PlasmicOptionsIcon__ArgsType;
  overrides: PlasmicOptionsIcon__OverridesType;
  dataFetches?: PlasmicOptionsIcon__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__variants2_sectionView]: hasVariant(
          variants,
          "variants2",
          "sectionView"
        )
      })}
    >
      {(hasVariant(variants, "variants2", "sectionView") ? false : true) ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__cOekO, {
            [sty.img__global_theme_dark__cOekOoIz4X]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.img__variants2_sectionView__cOekOe6QnE]: hasVariant(
              variants,
              "variants2",
              "sectionView"
            ),
            [sty.img__variants2_seeAllViewRed__cOekOJiHg4]: hasVariant(
              variants,
              "variants2",
              "seeAllViewRed"
            ),
            [sty.img__variants2_seeAllView__cOekOeIqxl]: hasVariant(
              variants,
              "variants2",
              "seeAllView"
            )
          })}
          role={"img"}
          src={
            hasVariant(variants, "variants2", "seeAllViewRed")
              ? iconsEditButton628NaKaKq3Zz
              : iconsEditButton6VNhT0JV8KZ
          }
        />
      ) : null}
      {(hasVariant(variants, "variants2", "seeAllViewRed") ? false : false) ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__gk5R0, {
            [sty.img__variants2_sectionView__gk5R0E6QnE]: hasVariant(
              variants,
              "variants2",
              "sectionView"
            ),
            [sty.img__variants2_seeAllViewRed__gk5R0JiHg4]: hasVariant(
              variants,
              "variants2",
              "seeAllViewRed"
            )
          })}
          role={"img"}
          src={iconsEditButton628NaKaKq3Zz}
        />
      ) : null}
      {(hasVariant(variants, "variants2", "sectionView") ? true : false) ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__vaP8, {
            [sty.img__variants2_sectionView__vaP8E6QnE]: hasVariant(
              variants,
              "variants2",
              "sectionView"
            ),
            [sty.img__variants2_seeAllViewRed__vaP8JiHg4]: hasVariant(
              variants,
              "variants2",
              "seeAllViewRed"
            )
          })}
          role={"img"}
          src={iconsEditButton6VNhT0JV8KZ}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOptionsIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOptionsIcon__VariantsArgs;
    args?: PlasmicOptionsIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicOptionsIcon__Fetches;
  } & Omit<PlasmicOptionsIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOptionsIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOptionsIcon__ArgProps,
      internalVariantPropNames: PlasmicOptionsIcon__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicOptionsIcon__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOptionsIcon";
  } else {
    func.displayName = `PlasmicOptionsIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicOptionsIcon = Object.assign(
  // Top-level PlasmicOptionsIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOptionsIcon
    internalVariantProps: PlasmicOptionsIcon__VariantProps,
    internalArgProps: PlasmicOptionsIcon__ArgProps
  }
);

export default PlasmicOptionsIcon;
/* prettier-ignore-end */
